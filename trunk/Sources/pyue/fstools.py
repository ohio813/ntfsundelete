# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _fstools
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


PARTITION_XINT13_EXTENDED = _fstools.PARTITION_XINT13_EXTENDED
PARTITION_EXTENDED = _fstools.PARTITION_EXTENDED
PARTITION_ENTRY_UNUSED = _fstools.PARTITION_ENTRY_UNUSED
class BIOS_PARAMETER_BLOCK(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BIOS_PARAMETER_BLOCK, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BIOS_PARAMETER_BLOCK, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bytes_per_sector"] = _fstools.BIOS_PARAMETER_BLOCK_bytes_per_sector_set
    __swig_getmethods__["bytes_per_sector"] = _fstools.BIOS_PARAMETER_BLOCK_bytes_per_sector_get
    if _newclass:bytes_per_sector = _swig_property(_fstools.BIOS_PARAMETER_BLOCK_bytes_per_sector_get, _fstools.BIOS_PARAMETER_BLOCK_bytes_per_sector_set)
    __swig_setmethods__["sectors_per_cluster"] = _fstools.BIOS_PARAMETER_BLOCK_sectors_per_cluster_set
    __swig_getmethods__["sectors_per_cluster"] = _fstools.BIOS_PARAMETER_BLOCK_sectors_per_cluster_get
    if _newclass:sectors_per_cluster = _swig_property(_fstools.BIOS_PARAMETER_BLOCK_sectors_per_cluster_get, _fstools.BIOS_PARAMETER_BLOCK_sectors_per_cluster_set)
    __swig_setmethods__["reserved_sectors"] = _fstools.BIOS_PARAMETER_BLOCK_reserved_sectors_set
    __swig_getmethods__["reserved_sectors"] = _fstools.BIOS_PARAMETER_BLOCK_reserved_sectors_get
    if _newclass:reserved_sectors = _swig_property(_fstools.BIOS_PARAMETER_BLOCK_reserved_sectors_get, _fstools.BIOS_PARAMETER_BLOCK_reserved_sectors_set)
    __swig_setmethods__["fats"] = _fstools.BIOS_PARAMETER_BLOCK_fats_set
    __swig_getmethods__["fats"] = _fstools.BIOS_PARAMETER_BLOCK_fats_get
    if _newclass:fats = _swig_property(_fstools.BIOS_PARAMETER_BLOCK_fats_get, _fstools.BIOS_PARAMETER_BLOCK_fats_set)
    __swig_setmethods__["root_entries"] = _fstools.BIOS_PARAMETER_BLOCK_root_entries_set
    __swig_getmethods__["root_entries"] = _fstools.BIOS_PARAMETER_BLOCK_root_entries_get
    if _newclass:root_entries = _swig_property(_fstools.BIOS_PARAMETER_BLOCK_root_entries_get, _fstools.BIOS_PARAMETER_BLOCK_root_entries_set)
    __swig_setmethods__["sectors"] = _fstools.BIOS_PARAMETER_BLOCK_sectors_set
    __swig_getmethods__["sectors"] = _fstools.BIOS_PARAMETER_BLOCK_sectors_get
    if _newclass:sectors = _swig_property(_fstools.BIOS_PARAMETER_BLOCK_sectors_get, _fstools.BIOS_PARAMETER_BLOCK_sectors_set)
    __swig_setmethods__["media_type"] = _fstools.BIOS_PARAMETER_BLOCK_media_type_set
    __swig_getmethods__["media_type"] = _fstools.BIOS_PARAMETER_BLOCK_media_type_get
    if _newclass:media_type = _swig_property(_fstools.BIOS_PARAMETER_BLOCK_media_type_get, _fstools.BIOS_PARAMETER_BLOCK_media_type_set)
    __swig_setmethods__["sectors_per_fat"] = _fstools.BIOS_PARAMETER_BLOCK_sectors_per_fat_set
    __swig_getmethods__["sectors_per_fat"] = _fstools.BIOS_PARAMETER_BLOCK_sectors_per_fat_get
    if _newclass:sectors_per_fat = _swig_property(_fstools.BIOS_PARAMETER_BLOCK_sectors_per_fat_get, _fstools.BIOS_PARAMETER_BLOCK_sectors_per_fat_set)
    __swig_setmethods__["sectors_per_track"] = _fstools.BIOS_PARAMETER_BLOCK_sectors_per_track_set
    __swig_getmethods__["sectors_per_track"] = _fstools.BIOS_PARAMETER_BLOCK_sectors_per_track_get
    if _newclass:sectors_per_track = _swig_property(_fstools.BIOS_PARAMETER_BLOCK_sectors_per_track_get, _fstools.BIOS_PARAMETER_BLOCK_sectors_per_track_set)
    __swig_setmethods__["heads"] = _fstools.BIOS_PARAMETER_BLOCK_heads_set
    __swig_getmethods__["heads"] = _fstools.BIOS_PARAMETER_BLOCK_heads_get
    if _newclass:heads = _swig_property(_fstools.BIOS_PARAMETER_BLOCK_heads_get, _fstools.BIOS_PARAMETER_BLOCK_heads_set)
    __swig_setmethods__["hidden_sectors"] = _fstools.BIOS_PARAMETER_BLOCK_hidden_sectors_set
    __swig_getmethods__["hidden_sectors"] = _fstools.BIOS_PARAMETER_BLOCK_hidden_sectors_get
    if _newclass:hidden_sectors = _swig_property(_fstools.BIOS_PARAMETER_BLOCK_hidden_sectors_get, _fstools.BIOS_PARAMETER_BLOCK_hidden_sectors_set)
    __swig_setmethods__["large_sectors"] = _fstools.BIOS_PARAMETER_BLOCK_large_sectors_set
    __swig_getmethods__["large_sectors"] = _fstools.BIOS_PARAMETER_BLOCK_large_sectors_get
    if _newclass:large_sectors = _swig_property(_fstools.BIOS_PARAMETER_BLOCK_large_sectors_get, _fstools.BIOS_PARAMETER_BLOCK_large_sectors_set)
    def __init__(self, *args): 
        this = _fstools.new_BIOS_PARAMETER_BLOCK(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fstools.delete_BIOS_PARAMETER_BLOCK
    __del__ = lambda self : None;
BIOS_PARAMETER_BLOCK_swigregister = _fstools.BIOS_PARAMETER_BLOCK_swigregister
BIOS_PARAMETER_BLOCK_swigregister(BIOS_PARAMETER_BLOCK)

class NTFS_BOOT_SECTOR(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NTFS_BOOT_SECTOR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NTFS_BOOT_SECTOR, name)
    __repr__ = _swig_repr
    __swig_setmethods__["jump"] = _fstools.NTFS_BOOT_SECTOR_jump_set
    __swig_getmethods__["jump"] = _fstools.NTFS_BOOT_SECTOR_jump_get
    if _newclass:jump = _swig_property(_fstools.NTFS_BOOT_SECTOR_jump_get, _fstools.NTFS_BOOT_SECTOR_jump_set)
    __swig_setmethods__["oem_id"] = _fstools.NTFS_BOOT_SECTOR_oem_id_set
    __swig_getmethods__["oem_id"] = _fstools.NTFS_BOOT_SECTOR_oem_id_get
    if _newclass:oem_id = _swig_property(_fstools.NTFS_BOOT_SECTOR_oem_id_get, _fstools.NTFS_BOOT_SECTOR_oem_id_set)
    __swig_setmethods__["bpb"] = _fstools.NTFS_BOOT_SECTOR_bpb_set
    __swig_getmethods__["bpb"] = _fstools.NTFS_BOOT_SECTOR_bpb_get
    if _newclass:bpb = _swig_property(_fstools.NTFS_BOOT_SECTOR_bpb_get, _fstools.NTFS_BOOT_SECTOR_bpb_set)
    __swig_setmethods__["unused"] = _fstools.NTFS_BOOT_SECTOR_unused_set
    __swig_getmethods__["unused"] = _fstools.NTFS_BOOT_SECTOR_unused_get
    if _newclass:unused = _swig_property(_fstools.NTFS_BOOT_SECTOR_unused_get, _fstools.NTFS_BOOT_SECTOR_unused_set)
    __swig_setmethods__["number_of_sectors"] = _fstools.NTFS_BOOT_SECTOR_number_of_sectors_set
    __swig_getmethods__["number_of_sectors"] = _fstools.NTFS_BOOT_SECTOR_number_of_sectors_get
    if _newclass:number_of_sectors = _swig_property(_fstools.NTFS_BOOT_SECTOR_number_of_sectors_get, _fstools.NTFS_BOOT_SECTOR_number_of_sectors_set)
    __swig_setmethods__["mft_lcn"] = _fstools.NTFS_BOOT_SECTOR_mft_lcn_set
    __swig_getmethods__["mft_lcn"] = _fstools.NTFS_BOOT_SECTOR_mft_lcn_get
    if _newclass:mft_lcn = _swig_property(_fstools.NTFS_BOOT_SECTOR_mft_lcn_get, _fstools.NTFS_BOOT_SECTOR_mft_lcn_set)
    __swig_setmethods__["mftmirr_lcn"] = _fstools.NTFS_BOOT_SECTOR_mftmirr_lcn_set
    __swig_getmethods__["mftmirr_lcn"] = _fstools.NTFS_BOOT_SECTOR_mftmirr_lcn_get
    if _newclass:mftmirr_lcn = _swig_property(_fstools.NTFS_BOOT_SECTOR_mftmirr_lcn_get, _fstools.NTFS_BOOT_SECTOR_mftmirr_lcn_set)
    __swig_setmethods__["clusters_per_mft_record"] = _fstools.NTFS_BOOT_SECTOR_clusters_per_mft_record_set
    __swig_getmethods__["clusters_per_mft_record"] = _fstools.NTFS_BOOT_SECTOR_clusters_per_mft_record_get
    if _newclass:clusters_per_mft_record = _swig_property(_fstools.NTFS_BOOT_SECTOR_clusters_per_mft_record_get, _fstools.NTFS_BOOT_SECTOR_clusters_per_mft_record_set)
    __swig_setmethods__["reserved0"] = _fstools.NTFS_BOOT_SECTOR_reserved0_set
    __swig_getmethods__["reserved0"] = _fstools.NTFS_BOOT_SECTOR_reserved0_get
    if _newclass:reserved0 = _swig_property(_fstools.NTFS_BOOT_SECTOR_reserved0_get, _fstools.NTFS_BOOT_SECTOR_reserved0_set)
    __swig_setmethods__["clusters_per_index_record"] = _fstools.NTFS_BOOT_SECTOR_clusters_per_index_record_set
    __swig_getmethods__["clusters_per_index_record"] = _fstools.NTFS_BOOT_SECTOR_clusters_per_index_record_get
    if _newclass:clusters_per_index_record = _swig_property(_fstools.NTFS_BOOT_SECTOR_clusters_per_index_record_get, _fstools.NTFS_BOOT_SECTOR_clusters_per_index_record_set)
    __swig_setmethods__["reserved1"] = _fstools.NTFS_BOOT_SECTOR_reserved1_set
    __swig_getmethods__["reserved1"] = _fstools.NTFS_BOOT_SECTOR_reserved1_get
    if _newclass:reserved1 = _swig_property(_fstools.NTFS_BOOT_SECTOR_reserved1_get, _fstools.NTFS_BOOT_SECTOR_reserved1_set)
    __swig_setmethods__["volume_serial_number"] = _fstools.NTFS_BOOT_SECTOR_volume_serial_number_set
    __swig_getmethods__["volume_serial_number"] = _fstools.NTFS_BOOT_SECTOR_volume_serial_number_get
    if _newclass:volume_serial_number = _swig_property(_fstools.NTFS_BOOT_SECTOR_volume_serial_number_get, _fstools.NTFS_BOOT_SECTOR_volume_serial_number_set)
    __swig_setmethods__["checksum"] = _fstools.NTFS_BOOT_SECTOR_checksum_set
    __swig_getmethods__["checksum"] = _fstools.NTFS_BOOT_SECTOR_checksum_get
    if _newclass:checksum = _swig_property(_fstools.NTFS_BOOT_SECTOR_checksum_get, _fstools.NTFS_BOOT_SECTOR_checksum_set)
    __swig_setmethods__["bootstrap"] = _fstools.NTFS_BOOT_SECTOR_bootstrap_set
    __swig_getmethods__["bootstrap"] = _fstools.NTFS_BOOT_SECTOR_bootstrap_get
    if _newclass:bootstrap = _swig_property(_fstools.NTFS_BOOT_SECTOR_bootstrap_get, _fstools.NTFS_BOOT_SECTOR_bootstrap_set)
    __swig_setmethods__["end_of_sector_marker"] = _fstools.NTFS_BOOT_SECTOR_end_of_sector_marker_set
    __swig_getmethods__["end_of_sector_marker"] = _fstools.NTFS_BOOT_SECTOR_end_of_sector_marker_get
    if _newclass:end_of_sector_marker = _swig_property(_fstools.NTFS_BOOT_SECTOR_end_of_sector_marker_get, _fstools.NTFS_BOOT_SECTOR_end_of_sector_marker_set)
    def __init__(self, *args): 
        this = _fstools.new_NTFS_BOOT_SECTOR(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fstools.delete_NTFS_BOOT_SECTOR
    __del__ = lambda self : None;
NTFS_BOOT_SECTOR_swigregister = _fstools.NTFS_BOOT_SECTOR_swigregister
NTFS_BOOT_SECTOR_swigregister(NTFS_BOOT_SECTOR)

class SPartitionEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SPartitionEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SPartitionEntry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["boot_state"] = _fstools.SPartitionEntry_boot_state_set
    __swig_getmethods__["boot_state"] = _fstools.SPartitionEntry_boot_state_get
    if _newclass:boot_state = _swig_property(_fstools.SPartitionEntry_boot_state_get, _fstools.SPartitionEntry_boot_state_set)
    __swig_setmethods__["begin_head"] = _fstools.SPartitionEntry_begin_head_set
    __swig_getmethods__["begin_head"] = _fstools.SPartitionEntry_begin_head_get
    if _newclass:begin_head = _swig_property(_fstools.SPartitionEntry_begin_head_get, _fstools.SPartitionEntry_begin_head_set)
    __swig_setmethods__["begin_sector"] = _fstools.SPartitionEntry_begin_sector_set
    __swig_getmethods__["begin_sector"] = _fstools.SPartitionEntry_begin_sector_get
    if _newclass:begin_sector = _swig_property(_fstools.SPartitionEntry_begin_sector_get, _fstools.SPartitionEntry_begin_sector_set)
    __swig_setmethods__["begin_cylinder"] = _fstools.SPartitionEntry_begin_cylinder_set
    __swig_getmethods__["begin_cylinder"] = _fstools.SPartitionEntry_begin_cylinder_get
    if _newclass:begin_cylinder = _swig_property(_fstools.SPartitionEntry_begin_cylinder_get, _fstools.SPartitionEntry_begin_cylinder_set)
    __swig_setmethods__["partition_type"] = _fstools.SPartitionEntry_partition_type_set
    __swig_getmethods__["partition_type"] = _fstools.SPartitionEntry_partition_type_get
    if _newclass:partition_type = _swig_property(_fstools.SPartitionEntry_partition_type_get, _fstools.SPartitionEntry_partition_type_set)
    __swig_setmethods__["end_head"] = _fstools.SPartitionEntry_end_head_set
    __swig_getmethods__["end_head"] = _fstools.SPartitionEntry_end_head_get
    if _newclass:end_head = _swig_property(_fstools.SPartitionEntry_end_head_get, _fstools.SPartitionEntry_end_head_set)
    __swig_setmethods__["end_sector"] = _fstools.SPartitionEntry_end_sector_set
    __swig_getmethods__["end_sector"] = _fstools.SPartitionEntry_end_sector_get
    if _newclass:end_sector = _swig_property(_fstools.SPartitionEntry_end_sector_get, _fstools.SPartitionEntry_end_sector_set)
    __swig_setmethods__["end_cylinder"] = _fstools.SPartitionEntry_end_cylinder_set
    __swig_getmethods__["end_cylinder"] = _fstools.SPartitionEntry_end_cylinder_get
    if _newclass:end_cylinder = _swig_property(_fstools.SPartitionEntry_end_cylinder_get, _fstools.SPartitionEntry_end_cylinder_set)
    __swig_setmethods__["starting_sector"] = _fstools.SPartitionEntry_starting_sector_set
    __swig_getmethods__["starting_sector"] = _fstools.SPartitionEntry_starting_sector_get
    if _newclass:starting_sector = _swig_property(_fstools.SPartitionEntry_starting_sector_get, _fstools.SPartitionEntry_starting_sector_set)
    __swig_setmethods__["sectors_count"] = _fstools.SPartitionEntry_sectors_count_set
    __swig_getmethods__["sectors_count"] = _fstools.SPartitionEntry_sectors_count_get
    if _newclass:sectors_count = _swig_property(_fstools.SPartitionEntry_sectors_count_get, _fstools.SPartitionEntry_sectors_count_set)
    def __init__(self, *args): 
        this = _fstools.new_SPartitionEntry(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fstools.delete_SPartitionEntry
    __del__ = lambda self : None;
SPartitionEntry_swigregister = _fstools.SPartitionEntry_swigregister
SPartitionEntry_swigregister(SPartitionEntry)

class SMasterBootRecord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SMasterBootRecord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SMasterBootRecord, name)
    __repr__ = _swig_repr
    __swig_setmethods__["boot_code"] = _fstools.SMasterBootRecord_boot_code_set
    __swig_getmethods__["boot_code"] = _fstools.SMasterBootRecord_boot_code_get
    if _newclass:boot_code = _swig_property(_fstools.SMasterBootRecord_boot_code_get, _fstools.SMasterBootRecord_boot_code_set)
    __swig_setmethods__["entries"] = _fstools.SMasterBootRecord_entries_set
    __swig_getmethods__["entries"] = _fstools.SMasterBootRecord_entries_get
    if _newclass:entries = _swig_property(_fstools.SMasterBootRecord_entries_get, _fstools.SMasterBootRecord_entries_set)
    __swig_setmethods__["signature"] = _fstools.SMasterBootRecord_signature_set
    __swig_getmethods__["signature"] = _fstools.SMasterBootRecord_signature_get
    if _newclass:signature = _swig_property(_fstools.SMasterBootRecord_signature_get, _fstools.SMasterBootRecord_signature_set)
    def __init__(self, *args): 
        this = _fstools.new_SMasterBootRecord(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fstools.delete_SMasterBootRecord
    __del__ = lambda self : None;
SMasterBootRecord_swigregister = _fstools.SMasterBootRecord_swigregister
SMasterBootRecord_swigregister(SMasterBootRecord)

class SCommonBootSector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SCommonBootSector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SCommonBootSector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["jump_code"] = _fstools.SCommonBootSector_jump_code_set
    __swig_getmethods__["jump_code"] = _fstools.SCommonBootSector_jump_code_get
    if _newclass:jump_code = _swig_property(_fstools.SCommonBootSector_jump_code_get, _fstools.SCommonBootSector_jump_code_set)
    __swig_setmethods__["oem_id"] = _fstools.SCommonBootSector_oem_id_set
    __swig_getmethods__["oem_id"] = _fstools.SCommonBootSector_oem_id_get
    if _newclass:oem_id = _swig_property(_fstools.SCommonBootSector_oem_id_get, _fstools.SCommonBootSector_oem_id_set)
    __swig_setmethods__["bpb"] = _fstools.SCommonBootSector_bpb_set
    __swig_getmethods__["bpb"] = _fstools.SCommonBootSector_bpb_get
    if _newclass:bpb = _swig_property(_fstools.SCommonBootSector_bpb_get, _fstools.SCommonBootSector_bpb_set)
    __swig_setmethods__["boot_code"] = _fstools.SCommonBootSector_boot_code_set
    __swig_getmethods__["boot_code"] = _fstools.SCommonBootSector_boot_code_get
    if _newclass:boot_code = _swig_property(_fstools.SCommonBootSector_boot_code_get, _fstools.SCommonBootSector_boot_code_set)
    __swig_setmethods__["signature"] = _fstools.SCommonBootSector_signature_set
    __swig_getmethods__["signature"] = _fstools.SCommonBootSector_signature_get
    if _newclass:signature = _swig_property(_fstools.SCommonBootSector_signature_get, _fstools.SCommonBootSector_signature_set)
    def __init__(self, *args): 
        this = _fstools.new_SCommonBootSector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fstools.delete_SCommonBootSector
    __del__ = lambda self : None;
SCommonBootSector_swigregister = _fstools.SCommonBootSector_swigregister
SCommonBootSector_swigregister(SCommonBootSector)

class SFAT16EBPB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SFAT16EBPB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SFAT16EBPB, name)
    __repr__ = _swig_repr
    __swig_setmethods__["drive_number"] = _fstools.SFAT16EBPB_drive_number_set
    __swig_getmethods__["drive_number"] = _fstools.SFAT16EBPB_drive_number_get
    if _newclass:drive_number = _swig_property(_fstools.SFAT16EBPB_drive_number_get, _fstools.SFAT16EBPB_drive_number_set)
    __swig_setmethods__["reserved_1"] = _fstools.SFAT16EBPB_reserved_1_set
    __swig_getmethods__["reserved_1"] = _fstools.SFAT16EBPB_reserved_1_get
    if _newclass:reserved_1 = _swig_property(_fstools.SFAT16EBPB_reserved_1_get, _fstools.SFAT16EBPB_reserved_1_set)
    __swig_setmethods__["boot_signature"] = _fstools.SFAT16EBPB_boot_signature_set
    __swig_getmethods__["boot_signature"] = _fstools.SFAT16EBPB_boot_signature_get
    if _newclass:boot_signature = _swig_property(_fstools.SFAT16EBPB_boot_signature_get, _fstools.SFAT16EBPB_boot_signature_set)
    __swig_setmethods__["volume_id"] = _fstools.SFAT16EBPB_volume_id_set
    __swig_getmethods__["volume_id"] = _fstools.SFAT16EBPB_volume_id_get
    if _newclass:volume_id = _swig_property(_fstools.SFAT16EBPB_volume_id_get, _fstools.SFAT16EBPB_volume_id_set)
    __swig_setmethods__["volume_label"] = _fstools.SFAT16EBPB_volume_label_set
    __swig_getmethods__["volume_label"] = _fstools.SFAT16EBPB_volume_label_get
    if _newclass:volume_label = _swig_property(_fstools.SFAT16EBPB_volume_label_get, _fstools.SFAT16EBPB_volume_label_set)
    __swig_setmethods__["file_system_type"] = _fstools.SFAT16EBPB_file_system_type_set
    __swig_getmethods__["file_system_type"] = _fstools.SFAT16EBPB_file_system_type_get
    if _newclass:file_system_type = _swig_property(_fstools.SFAT16EBPB_file_system_type_get, _fstools.SFAT16EBPB_file_system_type_set)
    def __init__(self, *args): 
        this = _fstools.new_SFAT16EBPB(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fstools.delete_SFAT16EBPB
    __del__ = lambda self : None;
SFAT16EBPB_swigregister = _fstools.SFAT16EBPB_swigregister
SFAT16EBPB_swigregister(SFAT16EBPB)

class SFAT32EBPB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SFAT32EBPB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SFAT32EBPB, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fat_size_in_sectors"] = _fstools.SFAT32EBPB_fat_size_in_sectors_set
    __swig_getmethods__["fat_size_in_sectors"] = _fstools.SFAT32EBPB_fat_size_in_sectors_get
    if _newclass:fat_size_in_sectors = _swig_property(_fstools.SFAT32EBPB_fat_size_in_sectors_get, _fstools.SFAT32EBPB_fat_size_in_sectors_set)
    __swig_setmethods__["extended_flags"] = _fstools.SFAT32EBPB_extended_flags_set
    __swig_getmethods__["extended_flags"] = _fstools.SFAT32EBPB_extended_flags_get
    if _newclass:extended_flags = _swig_property(_fstools.SFAT32EBPB_extended_flags_get, _fstools.SFAT32EBPB_extended_flags_set)
    __swig_setmethods__["version"] = _fstools.SFAT32EBPB_version_set
    __swig_getmethods__["version"] = _fstools.SFAT32EBPB_version_get
    if _newclass:version = _swig_property(_fstools.SFAT32EBPB_version_get, _fstools.SFAT32EBPB_version_set)
    __swig_setmethods__["root_cluster"] = _fstools.SFAT32EBPB_root_cluster_set
    __swig_getmethods__["root_cluster"] = _fstools.SFAT32EBPB_root_cluster_get
    if _newclass:root_cluster = _swig_property(_fstools.SFAT32EBPB_root_cluster_get, _fstools.SFAT32EBPB_root_cluster_set)
    __swig_setmethods__["fs_info_sector"] = _fstools.SFAT32EBPB_fs_info_sector_set
    __swig_getmethods__["fs_info_sector"] = _fstools.SFAT32EBPB_fs_info_sector_get
    if _newclass:fs_info_sector = _swig_property(_fstools.SFAT32EBPB_fs_info_sector_get, _fstools.SFAT32EBPB_fs_info_sector_set)
    __swig_setmethods__["boot_record_copy"] = _fstools.SFAT32EBPB_boot_record_copy_set
    __swig_getmethods__["boot_record_copy"] = _fstools.SFAT32EBPB_boot_record_copy_get
    if _newclass:boot_record_copy = _swig_property(_fstools.SFAT32EBPB_boot_record_copy_get, _fstools.SFAT32EBPB_boot_record_copy_set)
    __swig_setmethods__["reserved0"] = _fstools.SFAT32EBPB_reserved0_set
    __swig_getmethods__["reserved0"] = _fstools.SFAT32EBPB_reserved0_get
    if _newclass:reserved0 = _swig_property(_fstools.SFAT32EBPB_reserved0_get, _fstools.SFAT32EBPB_reserved0_set)
    __swig_setmethods__["drive_number"] = _fstools.SFAT32EBPB_drive_number_set
    __swig_getmethods__["drive_number"] = _fstools.SFAT32EBPB_drive_number_get
    if _newclass:drive_number = _swig_property(_fstools.SFAT32EBPB_drive_number_get, _fstools.SFAT32EBPB_drive_number_set)
    __swig_setmethods__["reserved1"] = _fstools.SFAT32EBPB_reserved1_set
    __swig_getmethods__["reserved1"] = _fstools.SFAT32EBPB_reserved1_get
    if _newclass:reserved1 = _swig_property(_fstools.SFAT32EBPB_reserved1_get, _fstools.SFAT32EBPB_reserved1_set)
    __swig_setmethods__["boot_signature"] = _fstools.SFAT32EBPB_boot_signature_set
    __swig_getmethods__["boot_signature"] = _fstools.SFAT32EBPB_boot_signature_get
    if _newclass:boot_signature = _swig_property(_fstools.SFAT32EBPB_boot_signature_get, _fstools.SFAT32EBPB_boot_signature_set)
    __swig_setmethods__["volume_id"] = _fstools.SFAT32EBPB_volume_id_set
    __swig_getmethods__["volume_id"] = _fstools.SFAT32EBPB_volume_id_get
    if _newclass:volume_id = _swig_property(_fstools.SFAT32EBPB_volume_id_get, _fstools.SFAT32EBPB_volume_id_set)
    __swig_setmethods__["volume_label"] = _fstools.SFAT32EBPB_volume_label_set
    __swig_getmethods__["volume_label"] = _fstools.SFAT32EBPB_volume_label_get
    if _newclass:volume_label = _swig_property(_fstools.SFAT32EBPB_volume_label_get, _fstools.SFAT32EBPB_volume_label_set)
    __swig_setmethods__["file_system_type"] = _fstools.SFAT32EBPB_file_system_type_set
    __swig_getmethods__["file_system_type"] = _fstools.SFAT32EBPB_file_system_type_get
    if _newclass:file_system_type = _swig_property(_fstools.SFAT32EBPB_file_system_type_get, _fstools.SFAT32EBPB_file_system_type_set)
    def __init__(self, *args): 
        this = _fstools.new_SFAT32EBPB(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fstools.delete_SFAT32EBPB
    __del__ = lambda self : None;
SFAT32EBPB_swigregister = _fstools.SFAT32EBPB_swigregister
SFAT32EBPB_swigregister(SFAT32EBPB)

class SFAT16BootSector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SFAT16BootSector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SFAT16BootSector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["jump_code"] = _fstools.SFAT16BootSector_jump_code_set
    __swig_getmethods__["jump_code"] = _fstools.SFAT16BootSector_jump_code_get
    if _newclass:jump_code = _swig_property(_fstools.SFAT16BootSector_jump_code_get, _fstools.SFAT16BootSector_jump_code_set)
    __swig_setmethods__["oem_id"] = _fstools.SFAT16BootSector_oem_id_set
    __swig_getmethods__["oem_id"] = _fstools.SFAT16BootSector_oem_id_get
    if _newclass:oem_id = _swig_property(_fstools.SFAT16BootSector_oem_id_get, _fstools.SFAT16BootSector_oem_id_set)
    __swig_setmethods__["bpb"] = _fstools.SFAT16BootSector_bpb_set
    __swig_getmethods__["bpb"] = _fstools.SFAT16BootSector_bpb_get
    if _newclass:bpb = _swig_property(_fstools.SFAT16BootSector_bpb_get, _fstools.SFAT16BootSector_bpb_set)
    __swig_setmethods__["ebpb"] = _fstools.SFAT16BootSector_ebpb_set
    __swig_getmethods__["ebpb"] = _fstools.SFAT16BootSector_ebpb_get
    if _newclass:ebpb = _swig_property(_fstools.SFAT16BootSector_ebpb_get, _fstools.SFAT16BootSector_ebpb_set)
    __swig_setmethods__["boot_code"] = _fstools.SFAT16BootSector_boot_code_set
    __swig_getmethods__["boot_code"] = _fstools.SFAT16BootSector_boot_code_get
    if _newclass:boot_code = _swig_property(_fstools.SFAT16BootSector_boot_code_get, _fstools.SFAT16BootSector_boot_code_set)
    __swig_setmethods__["signature"] = _fstools.SFAT16BootSector_signature_set
    __swig_getmethods__["signature"] = _fstools.SFAT16BootSector_signature_get
    if _newclass:signature = _swig_property(_fstools.SFAT16BootSector_signature_get, _fstools.SFAT16BootSector_signature_set)
    def __init__(self, *args): 
        this = _fstools.new_SFAT16BootSector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fstools.delete_SFAT16BootSector
    __del__ = lambda self : None;
SFAT16BootSector_swigregister = _fstools.SFAT16BootSector_swigregister
SFAT16BootSector_swigregister(SFAT16BootSector)

class SFAT32BootSector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SFAT32BootSector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SFAT32BootSector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["jump_code"] = _fstools.SFAT32BootSector_jump_code_set
    __swig_getmethods__["jump_code"] = _fstools.SFAT32BootSector_jump_code_get
    if _newclass:jump_code = _swig_property(_fstools.SFAT32BootSector_jump_code_get, _fstools.SFAT32BootSector_jump_code_set)
    __swig_setmethods__["oem_id"] = _fstools.SFAT32BootSector_oem_id_set
    __swig_getmethods__["oem_id"] = _fstools.SFAT32BootSector_oem_id_get
    if _newclass:oem_id = _swig_property(_fstools.SFAT32BootSector_oem_id_get, _fstools.SFAT32BootSector_oem_id_set)
    __swig_setmethods__["bpb"] = _fstools.SFAT32BootSector_bpb_set
    __swig_getmethods__["bpb"] = _fstools.SFAT32BootSector_bpb_get
    if _newclass:bpb = _swig_property(_fstools.SFAT32BootSector_bpb_get, _fstools.SFAT32BootSector_bpb_set)
    __swig_setmethods__["ebpb"] = _fstools.SFAT32BootSector_ebpb_set
    __swig_getmethods__["ebpb"] = _fstools.SFAT32BootSector_ebpb_get
    if _newclass:ebpb = _swig_property(_fstools.SFAT32BootSector_ebpb_get, _fstools.SFAT32BootSector_ebpb_set)
    __swig_setmethods__["boot_code"] = _fstools.SFAT32BootSector_boot_code_set
    __swig_getmethods__["boot_code"] = _fstools.SFAT32BootSector_boot_code_get
    if _newclass:boot_code = _swig_property(_fstools.SFAT32BootSector_boot_code_get, _fstools.SFAT32BootSector_boot_code_set)
    __swig_setmethods__["signature"] = _fstools.SFAT32BootSector_signature_set
    __swig_getmethods__["signature"] = _fstools.SFAT32BootSector_signature_get
    if _newclass:signature = _swig_property(_fstools.SFAT32BootSector_signature_get, _fstools.SFAT32BootSector_signature_set)
    def __init__(self, *args): 
        this = _fstools.new_SFAT32BootSector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fstools.delete_SFAT32BootSector
    __del__ = lambda self : None;
SFAT32BootSector_swigregister = _fstools.SFAT32BootSector_swigregister
SFAT32BootSector_swigregister(SFAT32BootSector)

magicNTFS = _fstools.magicNTFS
NTFS_SB_MAGIC = _fstools.NTFS_SB_MAGIC
magic_NULL = _fstools.magic_NULL
magic_FILE = _fstools.magic_FILE
magic_INDX = _fstools.magic_INDX
magic_HOLE = _fstools.magic_HOLE
magic_RSTR = _fstools.magic_RSTR
magic_RCRD = _fstools.magic_RCRD
magic_CHKD = _fstools.magic_CHKD
magic_BAAD = _fstools.magic_BAAD
magic_empty = _fstools.magic_empty
NTFS_BLOCK_SIZE = _fstools.NTFS_BLOCK_SIZE
NTFS_BLOCK_SIZE_BITS = _fstools.NTFS_BLOCK_SIZE_BITS
FILE_MFT = _fstools.FILE_MFT
FILE_MFTMirr = _fstools.FILE_MFTMirr
FILE_LogFile = _fstools.FILE_LogFile
FILE_Volume = _fstools.FILE_Volume
FILE_AttrDef = _fstools.FILE_AttrDef
FILE_root = _fstools.FILE_root
FILE_Bitmap = _fstools.FILE_Bitmap
FILE_Boot = _fstools.FILE_Boot
FILE_BadClus = _fstools.FILE_BadClus
FILE_Secure = _fstools.FILE_Secure
FILE_UpCase = _fstools.FILE_UpCase
FILE_Extend = _fstools.FILE_Extend
FILE_reserved12 = _fstools.FILE_reserved12
FILE_reserved13 = _fstools.FILE_reserved13
FILE_reserved14 = _fstools.FILE_reserved14
FILE_reserved15 = _fstools.FILE_reserved15
FILE_first_user = _fstools.FILE_first_user
MFT_RECORD_IN_USE = _fstools.MFT_RECORD_IN_USE
MFT_RECORD_IS_DIRECTORY = _fstools.MFT_RECORD_IS_DIRECTORY
MFT_REC_SPACE_FILLER = _fstools.MFT_REC_SPACE_FILLER
AT_UNUSED = _fstools.AT_UNUSED
AT_STANDARD_INFORMATION = _fstools.AT_STANDARD_INFORMATION
AT_ATTRIBUTE_LIST = _fstools.AT_ATTRIBUTE_LIST
AT_FILE_NAME = _fstools.AT_FILE_NAME
AT_OBJECT_ID = _fstools.AT_OBJECT_ID
AT_SECURITY_DESCRIPTOR = _fstools.AT_SECURITY_DESCRIPTOR
AT_VOLUME_NAME = _fstools.AT_VOLUME_NAME
AT_VOLUME_INFORMATION = _fstools.AT_VOLUME_INFORMATION
AT_DATA = _fstools.AT_DATA
AT_INDEX_ROOT = _fstools.AT_INDEX_ROOT
AT_INDEX_ALLOCATION = _fstools.AT_INDEX_ALLOCATION
AT_BITMAP = _fstools.AT_BITMAP
AT_REPARSE_POINT = _fstools.AT_REPARSE_POINT
AT_EA_INFORMATION = _fstools.AT_EA_INFORMATION
AT_EA = _fstools.AT_EA
AT_PROPERTY_SET = _fstools.AT_PROPERTY_SET
AT_LOGGED_UTILITY_STREAM = _fstools.AT_LOGGED_UTILITY_STREAM
AT_FIRST_USER_DEFINED_ATTRIBUTE = _fstools.AT_FIRST_USER_DEFINED_ATTRIBUTE
AT_END = _fstools.AT_END
COLLATION_BINARY = _fstools.COLLATION_BINARY
COLLATION_FILE_NAME = _fstools.COLLATION_FILE_NAME
COLLATION_UNICODE_STRING = _fstools.COLLATION_UNICODE_STRING
COLLATION_NTOFS_ULONG = _fstools.COLLATION_NTOFS_ULONG
COLLATION_NTOFS_SID = _fstools.COLLATION_NTOFS_SID
COLLATION_NTOFS_SECURITY_HASH = _fstools.COLLATION_NTOFS_SECURITY_HASH
COLLATION_NTOFS_ULONGS = _fstools.COLLATION_NTOFS_ULONGS
ATTR_DEF_INDEXABLE = _fstools.ATTR_DEF_INDEXABLE
ATTR_DEF_MULTIPLE = _fstools.ATTR_DEF_MULTIPLE
ATTR_DEF_NOT_ZERO = _fstools.ATTR_DEF_NOT_ZERO
ATTR_DEF_INDEXED_UNIQUE = _fstools.ATTR_DEF_INDEXED_UNIQUE
ATTR_DEF_NAMED_UNIQUE = _fstools.ATTR_DEF_NAMED_UNIQUE
ATTR_DEF_RESIDENT = _fstools.ATTR_DEF_RESIDENT
ATTR_DEF_ALWAYS_LOG = _fstools.ATTR_DEF_ALWAYS_LOG
ATTR_IS_COMPRESSED = _fstools.ATTR_IS_COMPRESSED
ATTR_COMPRESSION_MASK = _fstools.ATTR_COMPRESSION_MASK
ATTR_IS_ENCRYPTED = _fstools.ATTR_IS_ENCRYPTED
ATTR_IS_SPARSE = _fstools.ATTR_IS_SPARSE
RESIDENT_ATTR_IS_INDEXED = _fstools.RESIDENT_ATTR_IS_INDEXED
FILE_ATTR_READONLY = _fstools.FILE_ATTR_READONLY
FILE_ATTR_HIDDEN = _fstools.FILE_ATTR_HIDDEN
FILE_ATTR_SYSTEM = _fstools.FILE_ATTR_SYSTEM
FILE_ATTR_DIRECTORY = _fstools.FILE_ATTR_DIRECTORY
FILE_ATTR_ARCHIVE = _fstools.FILE_ATTR_ARCHIVE
FILE_ATTR_DEVICE = _fstools.FILE_ATTR_DEVICE
FILE_ATTR_NORMAL = _fstools.FILE_ATTR_NORMAL
FILE_ATTR_TEMPORARY = _fstools.FILE_ATTR_TEMPORARY
FILE_ATTR_SPARSE_FILE = _fstools.FILE_ATTR_SPARSE_FILE
FILE_ATTR_REPARSE_POINT = _fstools.FILE_ATTR_REPARSE_POINT
FILE_ATTR_COMPRESSED = _fstools.FILE_ATTR_COMPRESSED
FILE_ATTR_OFFLINE = _fstools.FILE_ATTR_OFFLINE
FILE_ATTR_NOT_CONTENT_INDEXED = _fstools.FILE_ATTR_NOT_CONTENT_INDEXED
FILE_ATTR_ENCRYPTED = _fstools.FILE_ATTR_ENCRYPTED
FILE_ATTR_VALID_FLAGS = _fstools.FILE_ATTR_VALID_FLAGS
FILE_ATTR_VALID_SET_FLAGS = _fstools.FILE_ATTR_VALID_SET_FLAGS
FILE_ATTR_DUP_FILE_NAME_INDEX_PRESENT = _fstools.FILE_ATTR_DUP_FILE_NAME_INDEX_PRESENT
FILE_ATTR_DUP_VIEW_INDEX_PRESENT = _fstools.FILE_ATTR_DUP_VIEW_INDEX_PRESENT
NTFS_MAX_NAME_LEN = _fstools.NTFS_MAX_NAME_LEN
FILE_NAME_POSIX = _fstools.FILE_NAME_POSIX
FILE_NAME_WIN32 = _fstools.FILE_NAME_WIN32
FILE_NAME_DOS = _fstools.FILE_NAME_DOS
FILE_NAME_WIN32_AND_DOS = _fstools.FILE_NAME_WIN32_AND_DOS
SSECURITY_NULL_RID = _fstools.SSECURITY_NULL_RID
SSECURITY_WORLD_RID = _fstools.SSECURITY_WORLD_RID
SSECURITY_LOCAL_RID = _fstools.SSECURITY_LOCAL_RID
SSECURITY_CREATOR_OWNER_RID = _fstools.SSECURITY_CREATOR_OWNER_RID
SSECURITY_CREATOR_GROUP_RID = _fstools.SSECURITY_CREATOR_GROUP_RID
SSECURITY_CREATOR_OWNER_SERVER_RID = _fstools.SSECURITY_CREATOR_OWNER_SERVER_RID
SSECURITY_CREATOR_GROUP_SERVER_RID = _fstools.SSECURITY_CREATOR_GROUP_SERVER_RID
SSECURITY_DIALUP_RID = _fstools.SSECURITY_DIALUP_RID
SSECURITY_NETWORK_RID = _fstools.SSECURITY_NETWORK_RID
SSECURITY_BATCH_RID = _fstools.SSECURITY_BATCH_RID
SSECURITY_INTERACTIVE_RID = _fstools.SSECURITY_INTERACTIVE_RID
SSECURITY_SERVICE_RID = _fstools.SSECURITY_SERVICE_RID
SSECURITY_ANONYMOUS_LOGON_RID = _fstools.SSECURITY_ANONYMOUS_LOGON_RID
SSECURITY_PROXY_RID = _fstools.SSECURITY_PROXY_RID
SSECURITY_ENTERPRISE_CONTROLLERS_RID = _fstools.SSECURITY_ENTERPRISE_CONTROLLERS_RID
SSECURITY_SERVER_LOGON_RID = _fstools.SSECURITY_SERVER_LOGON_RID
SSECURITY_PRINCIPAL_SELF_RID = _fstools.SSECURITY_PRINCIPAL_SELF_RID
SSECURITY_AUTHENTICATED_USER_RID = _fstools.SSECURITY_AUTHENTICATED_USER_RID
SSECURITY_RESTRICTED_CODE_RID = _fstools.SSECURITY_RESTRICTED_CODE_RID
SSECURITY_TERMINAL_SERVER_RID = _fstools.SSECURITY_TERMINAL_SERVER_RID
SSECURITY_LOGON_IDS_RID = _fstools.SSECURITY_LOGON_IDS_RID
SSECURITY_LOGON_IDS_RID_COUNT = _fstools.SSECURITY_LOGON_IDS_RID_COUNT
SSECURITY_LOCAL_SYSTEM_RID = _fstools.SSECURITY_LOCAL_SYSTEM_RID
SSECURITY_NT_NON_UNIQUE = _fstools.SSECURITY_NT_NON_UNIQUE
SSECURITY_BUILTIN_DOMAIN_RID = _fstools.SSECURITY_BUILTIN_DOMAIN_RID
SDOMAIN_USER_RID_ADMIN = _fstools.SDOMAIN_USER_RID_ADMIN
SDOMAIN_USER_RID_GUEST = _fstools.SDOMAIN_USER_RID_GUEST
SDOMAIN_USER_RID_KRBTGT = _fstools.SDOMAIN_USER_RID_KRBTGT
SDOMAIN_GROUP_RID_ADMINS = _fstools.SDOMAIN_GROUP_RID_ADMINS
SDOMAIN_GROUP_RID_USERS = _fstools.SDOMAIN_GROUP_RID_USERS
SDOMAIN_GROUP_RID_GUESTS = _fstools.SDOMAIN_GROUP_RID_GUESTS
SDOMAIN_GROUP_RID_COMPUTERS = _fstools.SDOMAIN_GROUP_RID_COMPUTERS
SDOMAIN_GROUP_RID_CONTROLLERS = _fstools.SDOMAIN_GROUP_RID_CONTROLLERS
SDOMAIN_GROUP_RID_CERT_ADMINS = _fstools.SDOMAIN_GROUP_RID_CERT_ADMINS
SDOMAIN_GROUP_RID_SCHEMA_ADMINS = _fstools.SDOMAIN_GROUP_RID_SCHEMA_ADMINS
SDOMAIN_GROUP_RID_ENTERPRISE_ADMINS = _fstools.SDOMAIN_GROUP_RID_ENTERPRISE_ADMINS
SDOMAIN_GROUP_RID_POLICY_ADMINS = _fstools.SDOMAIN_GROUP_RID_POLICY_ADMINS
SDOMAIN_ALIAS_RID_ADMINS = _fstools.SDOMAIN_ALIAS_RID_ADMINS
SDOMAIN_ALIAS_RID_USERS = _fstools.SDOMAIN_ALIAS_RID_USERS
SDOMAIN_ALIAS_RID_GUESTS = _fstools.SDOMAIN_ALIAS_RID_GUESTS
SDOMAIN_ALIAS_RID_POWER_USERS = _fstools.SDOMAIN_ALIAS_RID_POWER_USERS
SDOMAIN_ALIAS_RID_ACCOUNT_OPS = _fstools.SDOMAIN_ALIAS_RID_ACCOUNT_OPS
SDOMAIN_ALIAS_RID_SYSTEM_OPS = _fstools.SDOMAIN_ALIAS_RID_SYSTEM_OPS
SDOMAIN_ALIAS_RID_PRINT_OPS = _fstools.SDOMAIN_ALIAS_RID_PRINT_OPS
SDOMAIN_ALIAS_RID_BACKUP_OPS = _fstools.SDOMAIN_ALIAS_RID_BACKUP_OPS
SDOMAIN_ALIAS_RID_REPLICATOR = _fstools.SDOMAIN_ALIAS_RID_REPLICATOR
SDOMAIN_ALIAS_RID_RAS_SERVERS = _fstools.SDOMAIN_ALIAS_RID_RAS_SERVERS
SDOMAIN_ALIAS_RID_PREW2KCOMPACCESS = _fstools.SDOMAIN_ALIAS_RID_PREW2KCOMPACCESS
SSID_REVISION = _fstools.SSID_REVISION
SSID_MAX_SUB_AUTHORITIES = _fstools.SSID_MAX_SUB_AUTHORITIES
SSID_RECOMMENDED_SUB_AUTHORITIES = _fstools.SSID_RECOMMENDED_SUB_AUTHORITIES
SACCESS_MIN_MS_ACE_TYPE = _fstools.SACCESS_MIN_MS_ACE_TYPE
SACCESS_ALLOWED_ACE_TYPE = _fstools.SACCESS_ALLOWED_ACE_TYPE
SACCESS_DENIED_ACE_TYPE = _fstools.SACCESS_DENIED_ACE_TYPE
SSYSTEM_AUDIT_ACE_TYPE = _fstools.SSYSTEM_AUDIT_ACE_TYPE
SSYSTEM_ALARM_ACE_TYPE = _fstools.SSYSTEM_ALARM_ACE_TYPE
SACCESS_MAX_MS_V2_ACE_TYPE = _fstools.SACCESS_MAX_MS_V2_ACE_TYPE
SACCESS_ALLOWED_COMPOUND_ACE_TYPE = _fstools.SACCESS_ALLOWED_COMPOUND_ACE_TYPE
SACCESS_MAX_MS_V3_ACE_TYPE = _fstools.SACCESS_MAX_MS_V3_ACE_TYPE
SACCESS_MIN_MS_OBJECT_ACE_TYPE = _fstools.SACCESS_MIN_MS_OBJECT_ACE_TYPE
SACCESS_ALLOWED_OBJECT_ACE_TYPE = _fstools.SACCESS_ALLOWED_OBJECT_ACE_TYPE
SACCESS_DENIED_OBJECT_ACE_TYPE = _fstools.SACCESS_DENIED_OBJECT_ACE_TYPE
SSYSTEM_AUDIT_OBJECT_ACE_TYPE = _fstools.SSYSTEM_AUDIT_OBJECT_ACE_TYPE
SSYSTEM_ALARM_OBJECT_ACE_TYPE = _fstools.SSYSTEM_ALARM_OBJECT_ACE_TYPE
SACCESS_MAX_MS_OBJECT_ACE_TYPE = _fstools.SACCESS_MAX_MS_OBJECT_ACE_TYPE
SACCESS_MAX_MS_V4_ACE_TYPE = _fstools.SACCESS_MAX_MS_V4_ACE_TYPE
SACCESS_MAX_MS_ACE_TYPE = _fstools.SACCESS_MAX_MS_ACE_TYPE
SOBJECT_INHERIT_ACE = _fstools.SOBJECT_INHERIT_ACE
SCONTAINER_INHERIT_ACE = _fstools.SCONTAINER_INHERIT_ACE
SNO_PROPAGATE_INHERIT_ACE = _fstools.SNO_PROPAGATE_INHERIT_ACE
SINHERIT_ONLY_ACE = _fstools.SINHERIT_ONLY_ACE
SINHERITED_ACE = _fstools.SINHERITED_ACE
SVALID_INHERIT_FLAGS = _fstools.SVALID_INHERIT_FLAGS
SSUCCESSFUL_ACCESS_ACE_FLAG = _fstools.SSUCCESSFUL_ACCESS_ACE_FLAG
SFAILED_ACCESS_ACE_FLAG = _fstools.SFAILED_ACCESS_ACE_FLAG
VOLUME_IS_DIRTY = _fstools.VOLUME_IS_DIRTY
VOLUME_RESIZE_LOG_FILE = _fstools.VOLUME_RESIZE_LOG_FILE
VOLUME_UPGRADE_ON_MOUNT = _fstools.VOLUME_UPGRADE_ON_MOUNT
VOLUME_MOUNTED_ON_NT4 = _fstools.VOLUME_MOUNTED_ON_NT4
VOLUME_DELETE_USN_UNDERWAY = _fstools.VOLUME_DELETE_USN_UNDERWAY
VOLUME_REPAIR_OBJECT_ID = _fstools.VOLUME_REPAIR_OBJECT_ID
VOLUME_MODIFIED_BY_CHKDSK = _fstools.VOLUME_MODIFIED_BY_CHKDSK
VOLUME_FLAGS_MASK = _fstools.VOLUME_FLAGS_MASK
SMALL_INDEX = _fstools.SMALL_INDEX
LARGE_INDEX = _fstools.LARGE_INDEX
LEAF_NODE = _fstools.LEAF_NODE
INDEX_NODE = _fstools.INDEX_NODE
NODE_MASK = _fstools.NODE_MASK
QUOTA_FLAG_DEFAULT_LIMITS = _fstools.QUOTA_FLAG_DEFAULT_LIMITS
QUOTA_FLAG_LIMIT_REACHED = _fstools.QUOTA_FLAG_LIMIT_REACHED
QUOTA_FLAG_ID_DELETED = _fstools.QUOTA_FLAG_ID_DELETED
QUOTA_FLAG_USER_MASK = _fstools.QUOTA_FLAG_USER_MASK
QUOTA_FLAG_TRACKING_ENABLED = _fstools.QUOTA_FLAG_TRACKING_ENABLED
QUOTA_FLAG_ENFORCEMENT_ENABLED = _fstools.QUOTA_FLAG_ENFORCEMENT_ENABLED
QUOTA_FLAG_TRACKING_REQUESTED = _fstools.QUOTA_FLAG_TRACKING_REQUESTED
QUOTA_FLAG_LOG_THRESHOLD = _fstools.QUOTA_FLAG_LOG_THRESHOLD
QUOTA_FLAG_LOG_LIMIT = _fstools.QUOTA_FLAG_LOG_LIMIT
QUOTA_FLAG_OUT_OF_DATE = _fstools.QUOTA_FLAG_OUT_OF_DATE
QUOTA_FLAG_CORRUPT = _fstools.QUOTA_FLAG_CORRUPT
QUOTA_FLAG_PENDING_DELETES = _fstools.QUOTA_FLAG_PENDING_DELETES
QUOTA_INVALID_ID = _fstools.QUOTA_INVALID_ID
QUOTA_DEFAULTS_ID = _fstools.QUOTA_DEFAULTS_ID
QUOTA_FIRST_USER_ID = _fstools.QUOTA_FIRST_USER_ID
INDEX_ENTRY_NODE = _fstools.INDEX_ENTRY_NODE
INDEX_ENTRY_END = _fstools.INDEX_ENTRY_END
INDEX_ENTRY_SPACE_FILLER = _fstools.INDEX_ENTRY_SPACE_FILLER
NEED_EA = _fstools.NEED_EA
class CNTFSAttribute(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNTFSAttribute, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CNTFSAttribute, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == CNTFSAttribute:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fstools.new_CNTFSAttribute(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_type(*args): return _fstools.CNTFSAttribute_get_type(*args)
    def get_flags(*args): return _fstools.CNTFSAttribute_get_flags(*args)
    __swig_destroy__ = _fstools.delete_CNTFSAttribute
    __del__ = lambda self : None;
    def get_name(*args): return _fstools.CNTFSAttribute_get_name(*args)
    def __disown__(self):
        self.this.disown()
        _fstools.disown_CNTFSAttribute(self)
        return weakref_proxy(self)
CNTFSAttribute_swigregister = _fstools.CNTFSAttribute_swigregister
CNTFSAttribute_swigregister(CNTFSAttribute)
cvar = _fstools.cvar
MFT_REF_MASK_CPU = cvar.MFT_REF_MASK_CPU
MFT_REF_MASK_LE = cvar.MFT_REF_MASK_LE
NONE_CLUSTER_VALUE = cvar.NONE_CLUSTER_VALUE

class SNTFSExtent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SNTFSExtent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SNTFSExtent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vcn"] = _fstools.SNTFSExtent_vcn_set
    __swig_getmethods__["vcn"] = _fstools.SNTFSExtent_vcn_get
    if _newclass:vcn = _swig_property(_fstools.SNTFSExtent_vcn_get, _fstools.SNTFSExtent_vcn_set)
    __swig_setmethods__["lcn"] = _fstools.SNTFSExtent_lcn_set
    __swig_getmethods__["lcn"] = _fstools.SNTFSExtent_lcn_get
    if _newclass:lcn = _swig_property(_fstools.SNTFSExtent_lcn_get, _fstools.SNTFSExtent_lcn_set)
    __swig_setmethods__["length"] = _fstools.SNTFSExtent_length_set
    __swig_getmethods__["length"] = _fstools.SNTFSExtent_length_get
    if _newclass:length = _swig_property(_fstools.SNTFSExtent_length_get, _fstools.SNTFSExtent_length_set)
    def __init__(self, *args): 
        this = _fstools.new_SNTFSExtent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fstools.delete_SNTFSExtent
    __del__ = lambda self : None;
SNTFSExtent_swigregister = _fstools.SNTFSExtent_swigregister
SNTFSExtent_swigregister(SNTFSExtent)

class CNTFSExtentList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNTFSExtentList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CNTFSExtentList, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def get_count(*args): return _fstools.CNTFSExtentList_get_count(*args)
    __swig_destroy__ = _fstools.delete_CNTFSExtentList
    __del__ = lambda self : None;
    def get_extent(*args): return _fstools.CNTFSExtentList_get_extent(*args)
    def __len__(*args): return _fstools.CNTFSExtentList___len__(*args)
    def __getitem__(*args): return _fstools.CNTFSExtentList___getitem__(*args)
CNTFSExtentList_swigregister = _fstools.CNTFSExtentList_swigregister
CNTFSExtentList_swigregister(CNTFSExtentList)

class CNTFSResidentAttribute(CNTFSAttribute):
    __swig_setmethods__ = {}
    for _s in [CNTFSAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNTFSResidentAttribute, name, value)
    __swig_getmethods__ = {}
    for _s in [CNTFSAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CNTFSResidentAttribute, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == CNTFSResidentAttribute:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fstools.new_CNTFSResidentAttribute(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_content(*args): return _fstools.CNTFSResidentAttribute_get_content(*args)
    __swig_destroy__ = _fstools.delete_CNTFSResidentAttribute
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _fstools.disown_CNTFSResidentAttribute(self)
        return weakref_proxy(self)
CNTFSResidentAttribute_swigregister = _fstools.CNTFSResidentAttribute_swigregister
CNTFSResidentAttribute_swigregister(CNTFSResidentAttribute)

class CNTFSNonResidentAttribute(CNTFSAttribute):
    __swig_setmethods__ = {}
    for _s in [CNTFSAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNTFSNonResidentAttribute, name, value)
    __swig_getmethods__ = {}
    for _s in [CNTFSAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CNTFSNonResidentAttribute, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == CNTFSNonResidentAttribute:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fstools.new_CNTFSNonResidentAttribute(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_lowest_vcn(*args): return _fstools.CNTFSNonResidentAttribute_get_lowest_vcn(*args)
    def get_highest_vcn(*args): return _fstools.CNTFSNonResidentAttribute_get_highest_vcn(*args)
    def get_compression_unit(*args): return _fstools.CNTFSNonResidentAttribute_get_compression_unit(*args)
    def get_extents(*args): return _fstools.CNTFSNonResidentAttribute_get_extents(*args)
    def get_allocated_size(*args): return _fstools.CNTFSNonResidentAttribute_get_allocated_size(*args)
    def get_data_size(*args): return _fstools.CNTFSNonResidentAttribute_get_data_size(*args)
    def get_compressed_size(*args): return _fstools.CNTFSNonResidentAttribute_get_compressed_size(*args)
    __swig_destroy__ = _fstools.delete_CNTFSNonResidentAttribute
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _fstools.disown_CNTFSNonResidentAttribute(self)
        return weakref_proxy(self)
CNTFSNonResidentAttribute_swigregister = _fstools.CNTFSNonResidentAttribute_swigregister
CNTFSNonResidentAttribute_swigregister(CNTFSNonResidentAttribute)

class CNTFSMFTRecord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNTFSMFTRecord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CNTFSMFTRecord, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def get_magic(*args): return _fstools.CNTFSMFTRecord_get_magic(*args)
    def get_link_count(*args): return _fstools.CNTFSMFTRecord_get_link_count(*args)
    def get_flags(*args): return _fstools.CNTFSMFTRecord_get_flags(*args)
    def get_base_mft_record(*args): return _fstools.CNTFSMFTRecord_get_base_mft_record(*args)
    def get_attr_count(*args): return _fstools.CNTFSMFTRecord_get_attr_count(*args)
    def get_rattr_count(*args): return _fstools.CNTFSMFTRecord_get_rattr_count(*args)
    def get_nattr_count(*args): return _fstools.CNTFSMFTRecord_get_nattr_count(*args)
    __swig_destroy__ = _fstools.delete_CNTFSMFTRecord
    __del__ = lambda self : None;
    def get_nattribute(*args): return _fstools.CNTFSMFTRecord_get_nattribute(*args)
    def get_rattribute(*args): return _fstools.CNTFSMFTRecord_get_rattribute(*args)
CNTFSMFTRecord_swigregister = _fstools.CNTFSMFTRecord_swigregister
CNTFSMFTRecord_swigregister(CNTFSMFTRecord)

class CNTFSBaseObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNTFSBaseObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CNTFSBaseObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == CNTFSBaseObject:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fstools.new_CNTFSBaseObject(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fstools.delete_CNTFSBaseObject
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _fstools.disown_CNTFSBaseObject(self)
        return weakref_proxy(self)
CNTFSBaseObject_swigregister = _fstools.CNTFSBaseObject_swigregister
CNTFSBaseObject_swigregister(CNTFSBaseObject)

class CNTFSFileNameObject(CNTFSBaseObject):
    __swig_setmethods__ = {}
    for _s in [CNTFSBaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNTFSFileNameObject, name, value)
    __swig_getmethods__ = {}
    for _s in [CNTFSBaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CNTFSFileNameObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == CNTFSFileNameObject:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fstools.new_CNTFSFileNameObject(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_parent_directory(*args): return _fstools.CNTFSFileNameObject_get_parent_directory(*args)
    def get_creation_time(*args): return _fstools.CNTFSFileNameObject_get_creation_time(*args)
    def get_last_data_change_time(*args): return _fstools.CNTFSFileNameObject_get_last_data_change_time(*args)
    def get_last_mft_change_time(*args): return _fstools.CNTFSFileNameObject_get_last_mft_change_time(*args)
    def get_last_access_time(*args): return _fstools.CNTFSFileNameObject_get_last_access_time(*args)
    def get_allocated_size(*args): return _fstools.CNTFSFileNameObject_get_allocated_size(*args)
    def get_data_size(*args): return _fstools.CNTFSFileNameObject_get_data_size(*args)
    def get_file_attributes(*args): return _fstools.CNTFSFileNameObject_get_file_attributes(*args)
    def get_packed_ea_size(*args): return _fstools.CNTFSFileNameObject_get_packed_ea_size(*args)
    def get_reparse_point_tag(*args): return _fstools.CNTFSFileNameObject_get_reparse_point_tag(*args)
    def get_file_name_length(*args): return _fstools.CNTFSFileNameObject_get_file_name_length(*args)
    def get_file_name_type(*args): return _fstools.CNTFSFileNameObject_get_file_name_type(*args)
    def get_file_name(*args): return _fstools.CNTFSFileNameObject_get_file_name(*args)
    __swig_destroy__ = _fstools.delete_CNTFSFileNameObject
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _fstools.disown_CNTFSFileNameObject(self)
        return weakref_proxy(self)
CNTFSFileNameObject_swigregister = _fstools.CNTFSFileNameObject_swigregister
CNTFSFileNameObject_swigregister(CNTFSFileNameObject)

class CNTFSAttrListEntryObject(CNTFSBaseObject):
    __swig_setmethods__ = {}
    for _s in [CNTFSBaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNTFSAttrListEntryObject, name, value)
    __swig_getmethods__ = {}
    for _s in [CNTFSBaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CNTFSAttrListEntryObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == CNTFSAttrListEntryObject:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fstools.new_CNTFSAttrListEntryObject(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_type(*args): return _fstools.CNTFSAttrListEntryObject_get_type(*args)
    def get_length(*args): return _fstools.CNTFSAttrListEntryObject_get_length(*args)
    def get_lowest_vcn(*args): return _fstools.CNTFSAttrListEntryObject_get_lowest_vcn(*args)
    def get_mft_reference(*args): return _fstools.CNTFSAttrListEntryObject_get_mft_reference(*args)
    def get_instance(*args): return _fstools.CNTFSAttrListEntryObject_get_instance(*args)
    def get_name_length(*args): return _fstools.CNTFSAttrListEntryObject_get_name_length(*args)
    def get_name(*args): return _fstools.CNTFSAttrListEntryObject_get_name(*args)
    __swig_destroy__ = _fstools.delete_CNTFSAttrListEntryObject
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _fstools.disown_CNTFSAttrListEntryObject(self)
        return weakref_proxy(self)
CNTFSAttrListEntryObject_swigregister = _fstools.CNTFSAttrListEntryObject_swigregister
CNTFSAttrListEntryObject_swigregister(CNTFSAttrListEntryObject)

class CNTFSAttrListObject(CNTFSBaseObject):
    __swig_setmethods__ = {}
    for _s in [CNTFSBaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNTFSAttrListObject, name, value)
    __swig_getmethods__ = {}
    for _s in [CNTFSBaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CNTFSAttrListObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == CNTFSAttrListObject:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fstools.new_CNTFSAttrListObject(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_count(*args): return _fstools.CNTFSAttrListObject_get_count(*args)
    __swig_destroy__ = _fstools.delete_CNTFSAttrListObject
    __del__ = lambda self : None;
    def get_attr(*args): return _fstools.CNTFSAttrListObject_get_attr(*args)
    def __getitem__(*args): return _fstools.CNTFSAttrListObject___getitem__(*args)
    def __len__(*args): return _fstools.CNTFSAttrListObject___len__(*args)
    def __disown__(self):
        self.this.disown()
        _fstools.disown_CNTFSAttrListObject(self)
        return weakref_proxy(self)
CNTFSAttrListObject_swigregister = _fstools.CNTFSAttrListObject_swigregister
CNTFSAttrListObject_swigregister(CNTFSAttrListObject)

class CNTFSIndexEntryObject(CNTFSBaseObject):
    __swig_setmethods__ = {}
    for _s in [CNTFSBaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNTFSIndexEntryObject, name, value)
    __swig_getmethods__ = {}
    for _s in [CNTFSBaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CNTFSIndexEntryObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == CNTFSIndexEntryObject:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fstools.new_CNTFSIndexEntryObject(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_indexed_file(*args): return _fstools.CNTFSIndexEntryObject_get_indexed_file(*args)
    def get_length(*args): return _fstools.CNTFSIndexEntryObject_get_length(*args)
    def get_key_length(*args): return _fstools.CNTFSIndexEntryObject_get_key_length(*args)
    def get_flags(*args): return _fstools.CNTFSIndexEntryObject_get_flags(*args)
    def get_key(*args): return _fstools.CNTFSIndexEntryObject_get_key(*args)
    __swig_destroy__ = _fstools.delete_CNTFSIndexEntryObject
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _fstools.disown_CNTFSIndexEntryObject(self)
        return weakref_proxy(self)
CNTFSIndexEntryObject_swigregister = _fstools.CNTFSIndexEntryObject_swigregister
CNTFSIndexEntryObject_swigregister(CNTFSIndexEntryObject)

class CNTFSIndexRootObject(CNTFSBaseObject):
    __swig_setmethods__ = {}
    for _s in [CNTFSBaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNTFSIndexRootObject, name, value)
    __swig_getmethods__ = {}
    for _s in [CNTFSBaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CNTFSIndexRootObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == CNTFSIndexRootObject:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fstools.new_CNTFSIndexRootObject(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_type(*args): return _fstools.CNTFSIndexRootObject_get_type(*args)
    def get_collation_rule(*args): return _fstools.CNTFSIndexRootObject_get_collation_rule(*args)
    def get_index_block_size(*args): return _fstools.CNTFSIndexRootObject_get_index_block_size(*args)
    def get_clusters_per_index_block(*args): return _fstools.CNTFSIndexRootObject_get_clusters_per_index_block(*args)
    def get_index_length(*args): return _fstools.CNTFSIndexRootObject_get_index_length(*args)
    def get_allocated_size(*args): return _fstools.CNTFSIndexRootObject_get_allocated_size(*args)
    def get_header_flags(*args): return _fstools.CNTFSIndexRootObject_get_header_flags(*args)
    def get_count(*args): return _fstools.CNTFSIndexRootObject_get_count(*args)
    __swig_destroy__ = _fstools.delete_CNTFSIndexRootObject
    __del__ = lambda self : None;
    def get_entry(*args): return _fstools.CNTFSIndexRootObject_get_entry(*args)
    def __len__(*args): return _fstools.CNTFSIndexRootObject___len__(*args)
    def __getitem__(*args): return _fstools.CNTFSIndexRootObject___getitem__(*args)
    def __disown__(self):
        self.this.disown()
        _fstools.disown_CNTFSIndexRootObject(self)
        return weakref_proxy(self)
CNTFSIndexRootObject_swigregister = _fstools.CNTFSIndexRootObject_swigregister
CNTFSIndexRootObject_swigregister(CNTFSIndexRootObject)

class CNTFSIndexBlockObject(CNTFSBaseObject):
    __swig_setmethods__ = {}
    for _s in [CNTFSBaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNTFSIndexBlockObject, name, value)
    __swig_getmethods__ = {}
    for _s in [CNTFSBaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CNTFSIndexBlockObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == CNTFSIndexBlockObject:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fstools.new_CNTFSIndexBlockObject(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_lsn(*args): return _fstools.CNTFSIndexBlockObject_get_lsn(*args)
    def get_index_block_vcn(*args): return _fstools.CNTFSIndexBlockObject_get_index_block_vcn(*args)
    def get_index_length(*args): return _fstools.CNTFSIndexBlockObject_get_index_length(*args)
    def get_allocated_size(*args): return _fstools.CNTFSIndexBlockObject_get_allocated_size(*args)
    def get_header_flags(*args): return _fstools.CNTFSIndexBlockObject_get_header_flags(*args)
    def get_count(*args): return _fstools.CNTFSIndexBlockObject_get_count(*args)
    __swig_destroy__ = _fstools.delete_CNTFSIndexBlockObject
    __del__ = lambda self : None;
    def get_entry(*args): return _fstools.CNTFSIndexBlockObject_get_entry(*args)
    def __len__(*args): return _fstools.CNTFSIndexBlockObject___len__(*args)
    def __getitem__(*args): return _fstools.CNTFSIndexBlockObject___getitem__(*args)
    def __disown__(self):
        self.this.disown()
        _fstools.disown_CNTFSIndexBlockObject(self)
        return weakref_proxy(self)
CNTFSIndexBlockObject_swigregister = _fstools.CNTFSIndexBlockObject_swigregister
CNTFSIndexBlockObject_swigregister(CNTFSIndexBlockObject)

class CNTFSAttrDefObject(CNTFSBaseObject):
    __swig_setmethods__ = {}
    for _s in [CNTFSBaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNTFSAttrDefObject, name, value)
    __swig_getmethods__ = {}
    for _s in [CNTFSBaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CNTFSAttrDefObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == CNTFSAttrDefObject:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fstools.new_CNTFSAttrDefObject(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_type(*args): return _fstools.CNTFSAttrDefObject_get_type(*args)
    def get_display_rule(*args): return _fstools.CNTFSAttrDefObject_get_display_rule(*args)
    def get_collation_rule(*args): return _fstools.CNTFSAttrDefObject_get_collation_rule(*args)
    def get_flags(*args): return _fstools.CNTFSAttrDefObject_get_flags(*args)
    def get_min_size(*args): return _fstools.CNTFSAttrDefObject_get_min_size(*args)
    def get_max_size(*args): return _fstools.CNTFSAttrDefObject_get_max_size(*args)
    def get_name(*args): return _fstools.CNTFSAttrDefObject_get_name(*args)
    __swig_destroy__ = _fstools.delete_CNTFSAttrDefObject
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _fstools.disown_CNTFSAttrDefObject(self)
        return weakref_proxy(self)
CNTFSAttrDefObject_swigregister = _fstools.CNTFSAttrDefObject_swigregister
CNTFSAttrDefObject_swigregister(CNTFSAttrDefObject)

class CNTFSVolumeInformationObject(CNTFSBaseObject):
    __swig_setmethods__ = {}
    for _s in [CNTFSBaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNTFSVolumeInformationObject, name, value)
    __swig_getmethods__ = {}
    for _s in [CNTFSBaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CNTFSVolumeInformationObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == CNTFSVolumeInformationObject:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fstools.new_CNTFSVolumeInformationObject(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_major_ver(*args): return _fstools.CNTFSVolumeInformationObject_get_major_ver(*args)
    def get_minor_ver(*args): return _fstools.CNTFSVolumeInformationObject_get_minor_ver(*args)
    def get_flags(*args): return _fstools.CNTFSVolumeInformationObject_get_flags(*args)
    __swig_destroy__ = _fstools.delete_CNTFSVolumeInformationObject
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _fstools.disown_CNTFSVolumeInformationObject(self)
        return weakref_proxy(self)
CNTFSVolumeInformationObject_swigregister = _fstools.CNTFSVolumeInformationObject_swigregister
CNTFSVolumeInformationObject_swigregister(CNTFSVolumeInformationObject)

class CNTFSStdInfoObject(CNTFSBaseObject):
    __swig_setmethods__ = {}
    for _s in [CNTFSBaseObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNTFSStdInfoObject, name, value)
    __swig_getmethods__ = {}
    for _s in [CNTFSBaseObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CNTFSStdInfoObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == CNTFSStdInfoObject:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fstools.new_CNTFSStdInfoObject(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_creation_time(*args): return _fstools.CNTFSStdInfoObject_get_creation_time(*args)
    def get_last_data_change_time(*args): return _fstools.CNTFSStdInfoObject_get_last_data_change_time(*args)
    def get_last_mft_change_time(*args): return _fstools.CNTFSStdInfoObject_get_last_mft_change_time(*args)
    def get_last_access_time(*args): return _fstools.CNTFSStdInfoObject_get_last_access_time(*args)
    def get_file_attributes(*args): return _fstools.CNTFSStdInfoObject_get_file_attributes(*args)
    __swig_destroy__ = _fstools.delete_CNTFSStdInfoObject
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _fstools.disown_CNTFSStdInfoObject(self)
        return weakref_proxy(self)
CNTFSStdInfoObject_swigregister = _fstools.CNTFSStdInfoObject_swigregister
CNTFSStdInfoObject_swigregister(CNTFSStdInfoObject)

class CNTFSStdInfoV3Object(CNTFSStdInfoObject):
    __swig_setmethods__ = {}
    for _s in [CNTFSStdInfoObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNTFSStdInfoV3Object, name, value)
    __swig_getmethods__ = {}
    for _s in [CNTFSStdInfoObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CNTFSStdInfoV3Object, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == CNTFSStdInfoV3Object:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fstools.new_CNTFSStdInfoV3Object(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_maximum_versions(*args): return _fstools.CNTFSStdInfoV3Object_get_maximum_versions(*args)
    def get_version_number(*args): return _fstools.CNTFSStdInfoV3Object_get_version_number(*args)
    def get_class_id(*args): return _fstools.CNTFSStdInfoV3Object_get_class_id(*args)
    def get_owner_id(*args): return _fstools.CNTFSStdInfoV3Object_get_owner_id(*args)
    def get_security_id(*args): return _fstools.CNTFSStdInfoV3Object_get_security_id(*args)
    def get_quota_charged(*args): return _fstools.CNTFSStdInfoV3Object_get_quota_charged(*args)
    def get_usn(*args): return _fstools.CNTFSStdInfoV3Object_get_usn(*args)
    __swig_destroy__ = _fstools.delete_CNTFSStdInfoV3Object
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _fstools.disown_CNTFSStdInfoV3Object(self)
        return weakref_proxy(self)
CNTFSStdInfoV3Object_swigregister = _fstools.CNTFSStdInfoV3Object_swigregister
CNTFSStdInfoV3Object_swigregister(CNTFSStdInfoV3Object)

RDS_OK = _fstools.RDS_OK
RDS_IO_ERROR = _fstools.RDS_IO_ERROR
RDS_ACCESS_ERROR = _fstools.RDS_ACCESS_ERROR
RDS_OS_ERROR = _fstools.RDS_OS_ERROR
RDS_INVALID_PARAMETER = _fstools.RDS_INVALID_PARAMETER
MST_OK = _fstools.MST_OK
MST_OVERLAPPING_ERROR = _fstools.MST_OVERLAPPING_ERROR
MST_INVALID_PARAMETER = _fstools.MST_INVALID_PARAMETER
class CClusterSpace(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CClusterSpace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CClusterSpace, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == CClusterSpace:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fstools.new_CClusterSpace(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_cluster_size(*args): return _fstools.CClusterSpace_get_cluster_size(*args)
    def get_cluster_count(*args): return _fstools.CClusterSpace_get_cluster_count(*args)
    def _read_clusters(*args): return _fstools.CClusterSpace__read_clusters(*args)
    __swig_destroy__ = _fstools.delete_CClusterSpace
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _fstools.disown_CClusterSpace(self)
        return weakref_proxy(self)
CClusterSpace_swigregister = _fstools.CClusterSpace_swigregister
CClusterSpace_swigregister(CClusterSpace)
DEFAULT_SECTOR_SIZE = cvar.DEFAULT_SECTOR_SIZE
LINEARIZER_NO_LIMIT = cvar.LINEARIZER_NO_LIMIT
CLUSTERIZER_NO_LIMIT = cvar.CLUSTERIZER_NO_LIMIT

class CLinearSpace(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLinearSpace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CLinearSpace, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == CLinearSpace:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fstools.new_CLinearSpace(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_size(*args): return _fstools.CLinearSpace_get_size(*args)
    def _read_data(*args): return _fstools.CLinearSpace__read_data(*args)
    __swig_destroy__ = _fstools.delete_CLinearSpace
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _fstools.disown_CLinearSpace(self)
        return weakref_proxy(self)
CLinearSpace_swigregister = _fstools.CLinearSpace_swigregister
CLinearSpace_swigregister(CLinearSpace)

class CRefBufferSpace(CLinearSpace):
    __swig_setmethods__ = {}
    for _s in [CLinearSpace]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRefBufferSpace, name, value)
    __swig_getmethods__ = {}
    for _s in [CLinearSpace]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CRefBufferSpace, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == CRefBufferSpace:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fstools.new_CRefBufferSpace(*args)
        try: self.this.append(this)
        except: self.this = this
    def _read_data(*args): return _fstools.CRefBufferSpace__read_data(*args)
    def get_size(*args): return _fstools.CRefBufferSpace_get_size(*args)
    __swig_destroy__ = _fstools.delete_CRefBufferSpace
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _fstools.disown_CRefBufferSpace(self)
        return weakref_proxy(self)
CRefBufferSpace_swigregister = _fstools.CRefBufferSpace_swigregister
CRefBufferSpace_swigregister(CRefBufferSpace)

class CClusterLinearizer(CLinearSpace):
    __swig_setmethods__ = {}
    for _s in [CLinearSpace]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CClusterLinearizer, name, value)
    __swig_getmethods__ = {}
    for _s in [CLinearSpace]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CClusterLinearizer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == CClusterLinearizer:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fstools.new_CClusterLinearizer(*args)
        try: self.this.append(this)
        except: self.this = this
    def _read_data(*args): return _fstools.CClusterLinearizer__read_data(*args)
    def get_size(*args): return _fstools.CClusterLinearizer_get_size(*args)
    __swig_destroy__ = _fstools.delete_CClusterLinearizer
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _fstools.disown_CClusterLinearizer(self)
        return weakref_proxy(self)
CClusterLinearizer_swigregister = _fstools.CClusterLinearizer_swigregister
CClusterLinearizer_swigregister(CClusterLinearizer)

class CLinearClusterizer(CClusterSpace):
    __swig_setmethods__ = {}
    for _s in [CClusterSpace]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLinearClusterizer, name, value)
    __swig_getmethods__ = {}
    for _s in [CClusterSpace]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLinearClusterizer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == CLinearClusterizer:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fstools.new_CLinearClusterizer(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_cluster_size(*args): return _fstools.CLinearClusterizer_get_cluster_size(*args)
    def get_cluster_count(*args): return _fstools.CLinearClusterizer_get_cluster_count(*args)
    def _read_clusters(*args): return _fstools.CLinearClusterizer__read_clusters(*args)
    __swig_destroy__ = _fstools.delete_CLinearClusterizer
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _fstools.disown_CLinearClusterizer(self)
        return weakref_proxy(self)
CLinearClusterizer_swigregister = _fstools.CLinearClusterizer_swigregister
CLinearClusterizer_swigregister(CLinearClusterizer)

class CBaseDisk(CClusterSpace):
    __swig_setmethods__ = {}
    for _s in [CClusterSpace]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBaseDisk, name, value)
    __swig_getmethods__ = {}
    for _s in [CClusterSpace]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CBaseDisk, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == CBaseDisk:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fstools.new_CBaseDisk(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_sector_count(*args): return _fstools.CBaseDisk_get_sector_count(*args)
    def get_sector_size(*args): return _fstools.CBaseDisk_get_sector_size(*args)
    def get_cluster_size(*args): return _fstools.CBaseDisk_get_cluster_size(*args)
    def get_cluster_count(*args): return _fstools.CBaseDisk_get_cluster_count(*args)
    def _read_sectors(*args): return _fstools.CBaseDisk__read_sectors(*args)
    def _read_clusters(*args): return _fstools.CBaseDisk__read_clusters(*args)
    __swig_destroy__ = _fstools.delete_CBaseDisk
    __del__ = lambda self : None;
    def __len__(*args): return _fstools.CBaseDisk___len__(*args)
    def __disown__(self):
        self.this.disown()
        _fstools.disown_CBaseDisk(self)
        return weakref_proxy(self)
CBaseDisk_swigregister = _fstools.CBaseDisk_swigregister
CBaseDisk_swigregister(CBaseDisk)

class COSDisk(CBaseDisk):
    __swig_setmethods__ = {}
    for _s in [CBaseDisk]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, COSDisk, name, value)
    __swig_getmethods__ = {}
    for _s in [CBaseDisk]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, COSDisk, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == COSDisk:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fstools.new_COSDisk(*args)
        try: self.this.append(this)
        except: self.this = this
    def is_initialized(*args): return _fstools.COSDisk_is_initialized(*args)
    def _read_sectors(*args): return _fstools.COSDisk__read_sectors(*args)
    def get_sector_count(*args): return _fstools.COSDisk_get_sector_count(*args)
    def get_sector_size(*args): return _fstools.COSDisk_get_sector_size(*args)
    __swig_destroy__ = _fstools.delete_COSDisk
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _fstools.disown_COSDisk(self)
        return weakref_proxy(self)
COSDisk_swigregister = _fstools.COSDisk_swigregister
COSDisk_swigregister(COSDisk)

class CDiskClusterizer(CClusterSpace):
    __swig_setmethods__ = {}
    for _s in [CClusterSpace]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDiskClusterizer, name, value)
    __swig_getmethods__ = {}
    for _s in [CClusterSpace]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDiskClusterizer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == CDiskClusterizer:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fstools.new_CDiskClusterizer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fstools.delete_CDiskClusterizer
    __del__ = lambda self : None;
    def get_cluster_size(*args): return _fstools.CDiskClusterizer_get_cluster_size(*args)
    def get_cluster_count(*args): return _fstools.CDiskClusterizer_get_cluster_count(*args)
    def _read_clusters(*args): return _fstools.CDiskClusterizer__read_clusters(*args)
    def __disown__(self):
        self.this.disown()
        _fstools.disown_CDiskClusterizer(self)
        return weakref_proxy(self)
CDiskClusterizer_swigregister = _fstools.CDiskClusterizer_swigregister
CDiskClusterizer_swigregister(CDiskClusterizer)

class SExtent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SExtent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SExtent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vcn"] = _fstools.SExtent_vcn_set
    __swig_getmethods__["vcn"] = _fstools.SExtent_vcn_get
    if _newclass:vcn = _swig_property(_fstools.SExtent_vcn_get, _fstools.SExtent_vcn_set)
    __swig_setmethods__["tag"] = _fstools.SExtent_tag_set
    __swig_getmethods__["tag"] = _fstools.SExtent_tag_get
    if _newclass:tag = _swig_property(_fstools.SExtent_tag_get, _fstools.SExtent_tag_set)
    __swig_setmethods__["length"] = _fstools.SExtent_length_set
    __swig_getmethods__["length"] = _fstools.SExtent_length_get
    if _newclass:length = _swig_property(_fstools.SExtent_length_get, _fstools.SExtent_length_set)
    def __init__(self, *args): 
        this = _fstools.new_SExtent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fstools.delete_SExtent
    __del__ = lambda self : None;
SExtent_swigregister = _fstools.SExtent_swigregister
SExtent_swigregister(SExtent)

class CExtentList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CExtentList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CExtentList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == CExtentList:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fstools.new_CExtentList(*args)
        try: self.this.append(this)
        except: self.this = this
    def add_mapping(*args): return _fstools.CExtentList_add_mapping(*args)
    def mapping_for(*args): return _fstools.CExtentList_mapping_for(*args)
    def mapping_index_for(*args): return _fstools.CExtentList_mapping_index_for(*args)
    def get_mapping_count(*args): return _fstools.CExtentList_get_mapping_count(*args)
    def get_mapping_length(*args): return _fstools.CExtentList_get_mapping_length(*args)
    def extend(*args): return _fstools.CExtentList_extend(*args)
    def get_mapping(*args): return _fstools.CExtentList_get_mapping(*args)
    __swig_destroy__ = _fstools.delete_CExtentList
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _fstools.disown_CExtentList(self)
        return weakref_proxy(self)
CExtentList_swigregister = _fstools.CExtentList_swigregister
CExtentList_swigregister(CExtentList)

class CMappedClusterSpace(CClusterSpace):
    __swig_setmethods__ = {}
    for _s in [CClusterSpace]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMappedClusterSpace, name, value)
    __swig_getmethods__ = {}
    for _s in [CClusterSpace]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMappedClusterSpace, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == CMappedClusterSpace:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fstools.new_CMappedClusterSpace(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fstools.delete_CMappedClusterSpace
    __del__ = lambda self : None;
    def get_extents(*args): return _fstools.CMappedClusterSpace_get_extents(*args)
    def get_cluster_size(*args): return _fstools.CMappedClusterSpace_get_cluster_size(*args)
    def get_cluster_count(*args): return _fstools.CMappedClusterSpace_get_cluster_count(*args)
    def _read_clusters(*args): return _fstools.CMappedClusterSpace__read_clusters(*args)
    def __disown__(self):
        self.this.disown()
        _fstools.disown_CMappedClusterSpace(self)
        return weakref_proxy(self)
CMappedClusterSpace_swigregister = _fstools.CMappedClusterSpace_swigregister
CMappedClusterSpace_swigregister(CMappedClusterSpace)

class CCachedDisk(CBaseDisk):
    __swig_setmethods__ = {}
    for _s in [CBaseDisk]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCachedDisk, name, value)
    __swig_getmethods__ = {}
    for _s in [CBaseDisk]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCachedDisk, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == CCachedDisk:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fstools.new_CCachedDisk(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_sector_count(*args): return _fstools.CCachedDisk_get_sector_count(*args)
    def get_sector_size(*args): return _fstools.CCachedDisk_get_sector_size(*args)
    def get_cache_hits(*args): return _fstools.CCachedDisk_get_cache_hits(*args)
    def get_cache_miss(*args): return _fstools.CCachedDisk_get_cache_miss(*args)
    def _read_sectors(*args): return _fstools.CCachedDisk__read_sectors(*args)
    __swig_destroy__ = _fstools.delete_CCachedDisk
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _fstools.disown_CCachedDisk(self)
        return weakref_proxy(self)
CCachedDisk_swigregister = _fstools.CCachedDisk_swigregister
CCachedDisk_swigregister(CCachedDisk)

class CNTFSCompressedClusterSpace(CMappedClusterSpace):
    __swig_setmethods__ = {}
    for _s in [CMappedClusterSpace]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNTFSCompressedClusterSpace, name, value)
    __swig_getmethods__ = {}
    for _s in [CMappedClusterSpace]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CNTFSCompressedClusterSpace, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == CNTFSCompressedClusterSpace:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fstools.new_CNTFSCompressedClusterSpace(*args)
        try: self.this.append(this)
        except: self.this = this
    def _read_clusters(*args): return _fstools.CNTFSCompressedClusterSpace__read_clusters(*args)
    __swig_destroy__ = _fstools.delete_CNTFSCompressedClusterSpace
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _fstools.disown_CNTFSCompressedClusterSpace(self)
        return weakref_proxy(self)
CNTFSCompressedClusterSpace_swigregister = _fstools.CNTFSCompressedClusterSpace_swigregister
CNTFSCompressedClusterSpace_swigregister(CNTFSCompressedClusterSpace)

class CPartitionEventProducer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPartitionEventProducer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPartitionEventProducer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == CPartitionEventProducer:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fstools.new_CPartitionEventProducer(*args)
        try: self.this.append(this)
        except: self.this = this
    def _add_listener(*args): return _fstools.CPartitionEventProducer__add_listener(*args)
    def _remove_listener(*args): return _fstools.CPartitionEventProducer__remove_listener(*args)
    def get_listener(*args): return _fstools.CPartitionEventProducer_get_listener(*args)
    def get_listener_count(*args): return _fstools.CPartitionEventProducer_get_listener_count(*args)
    __swig_destroy__ = _fstools.delete_CPartitionEventProducer
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _fstools.disown_CPartitionEventProducer(self)
        return weakref_proxy(self)
CPartitionEventProducer_swigregister = _fstools.CPartitionEventProducer_swigregister
CPartitionEventProducer_swigregister(CPartitionEventProducer)

fstInvalid = _fstools.fstInvalid
fstUnknown = _fstools.fstUnknown
fstFAT12 = _fstools.fstFAT12
fstFAT16 = _fstools.fstFAT16
fstFAT32 = _fstools.fstFAT32
fstNTFS = _fstools.fstNTFS
fnsOk = _fstools.fnsOk
fnsNeedMoreScan = _fstools.fnsNeedMoreScan
fnsCancelled = _fstools.fnsCancelled
pslLevel1 = _fstools.pslLevel1
pslLevel2 = _fstools.pslLevel2
pslLevel3 = _fstools.pslLevel3
pslLevel4 = _fstools.pslLevel4
class SPartitionInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SPartitionInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SPartitionInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fs_type"] = _fstools.SPartitionInfo_fs_type_set
    __swig_getmethods__["fs_type"] = _fstools.SPartitionInfo_fs_type_get
    if _newclass:fs_type = _swig_property(_fstools.SPartitionInfo_fs_type_get, _fstools.SPartitionInfo_fs_type_set)
    __swig_setmethods__["start_sector"] = _fstools.SPartitionInfo_start_sector_set
    __swig_getmethods__["start_sector"] = _fstools.SPartitionInfo_start_sector_get
    if _newclass:start_sector = _swig_property(_fstools.SPartitionInfo_start_sector_get, _fstools.SPartitionInfo_start_sector_set)
    __swig_setmethods__["sectors_count"] = _fstools.SPartitionInfo_sectors_count_set
    __swig_getmethods__["sectors_count"] = _fstools.SPartitionInfo_sectors_count_get
    if _newclass:sectors_count = _swig_property(_fstools.SPartitionInfo_sectors_count_get, _fstools.SPartitionInfo_sectors_count_set)
    __swig_setmethods__["use_custom_boot_sector"] = _fstools.SPartitionInfo_use_custom_boot_sector_set
    __swig_getmethods__["use_custom_boot_sector"] = _fstools.SPartitionInfo_use_custom_boot_sector_get
    if _newclass:use_custom_boot_sector = _swig_property(_fstools.SPartitionInfo_use_custom_boot_sector_get, _fstools.SPartitionInfo_use_custom_boot_sector_set)
    __swig_setmethods__["custom_boot_sector"] = _fstools.SPartitionInfo_custom_boot_sector_set
    __swig_getmethods__["custom_boot_sector"] = _fstools.SPartitionInfo_custom_boot_sector_get
    if _newclass:custom_boot_sector = _swig_property(_fstools.SPartitionInfo_custom_boot_sector_get, _fstools.SPartitionInfo_custom_boot_sector_set)
    def __init__(self, *args): 
        this = _fstools.new_SPartitionInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fstools.delete_SPartitionInfo
    __del__ = lambda self : None;
SPartitionInfo_swigregister = _fstools.SPartitionInfo_swigregister
SPartitionInfo_swigregister(SPartitionInfo)

class IPartitionFinderListener(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPartitionFinderListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPartitionFinderListener, name)
    __repr__ = _swig_repr
    def on_start_search(*args): return _fstools.IPartitionFinderListener_on_start_search(*args)
    def on_paritition_found(*args): return _fstools.IPartitionFinderListener_on_paritition_found(*args)
    def on_progress_notify(*args): return _fstools.IPartitionFinderListener_on_progress_notify(*args)
    def on_disk_io_error(*args): return _fstools.IPartitionFinderListener_on_disk_io_error(*args)
    def on_cancel_query(*args): return _fstools.IPartitionFinderListener_on_cancel_query(*args)
    def on_validate_partition(*args): return _fstools.IPartitionFinderListener_on_validate_partition(*args)
    def on_finish_search(*args): return _fstools.IPartitionFinderListener_on_finish_search(*args)
    __swig_destroy__ = _fstools.delete_IPartitionFinderListener
    __del__ = lambda self : None;
    def __init__(self, *args): 
        if self.__class__ == IPartitionFinderListener:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fstools.new_IPartitionFinderListener(*args)
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _fstools.disown_IPartitionFinderListener(self)
        return weakref_proxy(self)
IPartitionFinderListener_swigregister = _fstools.IPartitionFinderListener_swigregister
IPartitionFinderListener_swigregister(IPartitionFinderListener)

class CBasePartitionFinder(CPartitionEventProducer):
    __swig_setmethods__ = {}
    for _s in [CPartitionEventProducer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CBasePartitionFinder, name, value)
    __swig_getmethods__ = {}
    for _s in [CPartitionEventProducer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CBasePartitionFinder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == CBasePartitionFinder:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fstools.new_CBasePartitionFinder(*args)
        try: self.this.append(this)
        except: self.this = this
    def do_search(*args): return _fstools.CBasePartitionFinder_do_search(*args)
    def validate_boot_sector(*args): return _fstools.CBasePartitionFinder_validate_boot_sector(*args)
    def validate_partition(*args): return _fstools.CBasePartitionFinder_validate_partition(*args)
    def notify_found_partition(*args): return _fstools.CBasePartitionFinder_notify_found_partition(*args)
    def notify_progress(*args): return _fstools.CBasePartitionFinder_notify_progress(*args)
    def notify_disk_io_error(*args): return _fstools.CBasePartitionFinder_notify_disk_io_error(*args)
    def query_cancel(*args): return _fstools.CBasePartitionFinder_query_cancel(*args)
    def get_disk(*args): return _fstools.CBasePartitionFinder_get_disk(*args)
    def find_partitions(*args): return _fstools.CBasePartitionFinder_find_partitions(*args)
    __swig_destroy__ = _fstools.delete_CBasePartitionFinder
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _fstools.disown_CBasePartitionFinder(self)
        return weakref_proxy(self)
CBasePartitionFinder_swigregister = _fstools.CBasePartitionFinder_swigregister
CBasePartitionFinder_swigregister(CBasePartitionFinder)

class CScannedPartitionFinder(CBasePartitionFinder):
    __swig_setmethods__ = {}
    for _s in [CBasePartitionFinder]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CScannedPartitionFinder, name, value)
    __swig_getmethods__ = {}
    for _s in [CBasePartitionFinder]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CScannedPartitionFinder, name)
    __repr__ = _swig_repr
    def do_search(*args): return _fstools.CScannedPartitionFinder_do_search(*args)
    def __init__(self, *args): 
        if self.__class__ == CScannedPartitionFinder:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fstools.new_CScannedPartitionFinder(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_last_scanned_sector(*args): return _fstools.CScannedPartitionFinder_get_last_scanned_sector(*args)
    __swig_destroy__ = _fstools.delete_CScannedPartitionFinder
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _fstools.disown_CScannedPartitionFinder(self)
        return weakref_proxy(self)
    def validate_boot_sector(*args): return _fstools.CScannedPartitionFinder_validate_boot_sector(*args)
    def validate_partition(*args): return _fstools.CScannedPartitionFinder_validate_partition(*args)
    def notify_found_partition(*args): return _fstools.CScannedPartitionFinder_notify_found_partition(*args)
    def notify_progress(*args): return _fstools.CScannedPartitionFinder_notify_progress(*args)
    def notify_disk_io_error(*args): return _fstools.CScannedPartitionFinder_notify_disk_io_error(*args)
    def query_cancel(*args): return _fstools.CScannedPartitionFinder_query_cancel(*args)
CScannedPartitionFinder_swigregister = _fstools.CScannedPartitionFinder_swigregister
CScannedPartitionFinder_swigregister(CScannedPartitionFinder)

is_valid_mbr = _fstools.is_valid_mbr
is_boot_sector = _fstools.is_boot_sector
is_ntfs_boot_sector = _fstools.is_ntfs_boot_sector
is_fat12_boot_sector = _fstools.is_fat12_boot_sector
is_fat16_boot_sector = _fstools.is_fat16_boot_sector
is_fat32_boot_sector = _fstools.is_fat32_boot_sector
dbg_get_stat = _fstools.dbg_get_stat
new_buffer = _fstools.new_buffer
CreateCRefBufferSpace = _fstools.CreateCRefBufferSpace
_CreateCScannedPartitionFinder = _fstools._CreateCScannedPartitionFinder
_CreateCClusterLinearizer = _fstools._CreateCClusterLinearizer
_CreateCLinearClusterizer = _fstools._CreateCLinearClusterizer
_CreateCMappedClusterSpace = _fstools._CreateCMappedClusterSpace
_CreateCNTFSCompressedClusterSpace = _fstools._CreateCNTFSCompressedClusterSpace
_CreateCDiskClusterizer = _fstools._CreateCDiskClusterizer
_CreateCCachedDisk = _fstools._CreateCCachedDisk
CreateCOSDisk = _fstools.CreateCOSDisk
parse_mft_record = _fstools.parse_mft_record
new_ntfs_filename_object = _fstools.new_ntfs_filename_object
new_ntfs_attrlist_object = _fstools.new_ntfs_attrlist_object
new_ntfs_indexentry_object = _fstools.new_ntfs_indexentry_object
new_ntfs_indexroot_object = _fstools.new_ntfs_indexroot_object
new_ntfs_indexblock_object = _fstools.new_ntfs_indexblock_object
new_ntfs_attrdef_object = _fstools.new_ntfs_attrdef_object
new_ntfs_volumeinformation_object = _fstools.new_ntfs_volumeinformation_object
ntfs_bootsector_from = _fstools.ntfs_bootsector_from
new_ntfs_stdinfo_object = _fstools.new_ntfs_stdinfo_object
new_ntfs_stdinfov3_object = _fstools.new_ntfs_stdinfov3_object
class DiskAccessViolation(Exception):
	def __init__(self, sector_address_start, sector_address_end):
		Exception.__init__(self, "Disk access violation at address [%s:%s]" % (hex(sector_address_start), hex(sector_address_end)))
		
class DiskOSError(Exception):
	def __init__(self, start_address, end_address):
		Exception.__init__(self, "OS error in [%s:%s] sector range" % (hex(start_address), hex(end_address)))
		
def _process_code(code, data, start, count):
	if code == RDS_OK:
		return str(data)
	elif code == RDS_IO_ERROR:
		raise IOError("Read sectors at %s, len=%s" % (hex(start), hex(count)))
	elif code == RDS_ACCESS_ERROR:
		raise DiskAccessViolation(start, start+count)
	elif code == RDS_OS_ERROR:
		raise DiskOSError(start, start+count)
	else:
		raise Exception("Unknown disk read error - code %s at range [%s:%s]" % (code, hex(start), hex(start+count)))
			

def _read_sectors(self, start, count):
    data = new_buffer(int(count*self.get_sector_size()))
    code = self._read_sectors(start, count, data)
    return _process_code(code, data, start, count)
	
def _read_clusters(self, start, count):
    data = new_buffer(int(count*self.get_cluster_size()))
    code = self._read_clusters(start, count, data)
    return _process_code(code, data, start, count)
	
def _read_data(self, start, count):
    data = new_buffer(int(count))
    code = self._read_data(start, count, data)
    return _process_code(code, data, start, count)

def disk__getitem__(self, key):
    if isinstance(key, int) or isinstance(key, long):
        return self.read_sectors(key, 1)
    elif isinstance(key, slice):
        assert key.start >= 0 and key.stop >= 0 and key.step is None 
        return self.read_sectors(key.start, key.stop-key.start)
    else:
        raise TypeError("Invalid sector addressing")


CBaseDisk.sector_count = property (lambda self: self.get_sector_count())
CBaseDisk.sector_size = property (lambda self: self.get_sector_size())
CBaseDisk.read_sectors = _read_sectors
CBaseDisk.__getitem__ = disk__getitem__

CLinearSpace.size = property (lambda self: self.get_size())
CLinearSpace.read_data = _read_data

CClusterSpace.cluster_count = property (lambda self: self.get_cluster_count())
CClusterSpace.cluster_size = property (lambda self: self.get_cluster_size())
CClusterSpace.read_clusters = _read_clusters

def CreateCClusterLinearizer(target_space, linear_limit, start_cluster):
	R = _CreateCClusterLinearizer(target_space, linear_limit, start_cluster)
	R._target_space = target_space
	return R
	
def __add_listener(self, listener):
	self._listeners[listener] = 1
	return self._add_listener(listener)	
	
def __remove_listener(self, listener):
	try:
		del self._listeners[listener]
	except:
		pass
	return self._remove_listener(listener)
	
CScannedPartitionFinder.add_listener = __add_listener
CScannedPartitionFinder.remove_listener = __remove_listener

def __init_listeners(obj):	
	obj._listeners = {}
	
def CreateCScannedPartitionFinder(disk, level, start_sector):
	R = _CreateCScannedPartitionFinder(disk, level, start_sector)
	R._disk = disk
	__init_listeners(R)
	return R
	
	
def CreateCLinearClusterizer(target_space, cluster_size, cluster_limit, start_pos):
	R = _CreateCLinearClusterizer(target_space, cluster_size, cluster_limit, start_pos)
	R._target_space = target_space
	return R
	
def CreateCMappedClusterSpace(target_space):
	R = _CreateCMappedClusterSpace(target_space)
	R._target_space = target_space
	return R
	
def CreateCCachedDisk(target_disk, line_bits, max_cache_lines):
    R = _CreateCCachedDisk(target_disk, line_bits, max_cache_lines)
    R._target_disk = target_disk
    return R
	
def CreateCDiskClusterizer(target_disk, sectors_per_cluster, sector_count, start_sector):
	R = _CreateCDiskClusterizer(target_disk, sectors_per_cluster, sector_count, start_sector)
	R._target_disk = target_disk
	return R
	
def CreateCNTFSCompressedClusterSpace(target_space, compression_unit):
	R = _CreateCNTFSCompressedClusterSpace(target_space, compression_unit)
	R._target_space = target_space
	return R
	

def print_stat():
    keys = [
        "DbgCClusterSpaceCreated",
        "DbgCClusterSpaceDisposed",
        "DbgCLinearSpaceCreated",
        "DbgCLinearSpaceDisposed",
        "DbgCRefBufferSpaceCreated",
        "DbgCRefBufferSpaceDisposed",
        "DbgCClusterLinearizerCreated",
        "DbgCClusterLinearizerDisposed",
        "DbgCLinearClusterizerCreated",
        "DbgCLinearClusterizerDisposed",
        "DbgCBaseDiskCreated",
        "DbgCBaseDiskDisposed",
        "DbgCOSDiskCreated",
        "DbgCOSDiskDisposed",
        "DbgCExtentListCreated",
        "DbgCExtentListDisposed",
        "DbgCMappedClusterSpaceCreated",
        "DbgCMappedClusterSpaceDisposed",
        "DbgCDiskClusterizerCreated",
        "DbgCDiskClusterizerDisposed",
        "DbgCSimpleListCreated",
        "DbgCSimpleListDisposed"
	]
    print "**** Object creation statistics: ****"    
    for key in keys:
        print "%30s" % key, "\t", eval("cvar."+key)
    print "*************************************"
	




DbgCClusterSpaceCreated = cvar.DbgCClusterSpaceCreated
DbgCClusterSpaceDisposed = cvar.DbgCClusterSpaceDisposed
DbgCLinearSpaceCreated = cvar.DbgCLinearSpaceCreated
DbgCLinearSpaceDisposed = cvar.DbgCLinearSpaceDisposed
DbgCRefBufferSpaceCreated = cvar.DbgCRefBufferSpaceCreated
DbgCRefBufferSpaceDisposed = cvar.DbgCRefBufferSpaceDisposed
DbgCClusterLinearizerCreated = cvar.DbgCClusterLinearizerCreated
DbgCClusterLinearizerDisposed = cvar.DbgCClusterLinearizerDisposed
DbgCLinearClusterizerCreated = cvar.DbgCLinearClusterizerCreated
DbgCLinearClusterizerDisposed = cvar.DbgCLinearClusterizerDisposed
DbgCBaseDiskCreated = cvar.DbgCBaseDiskCreated
DbgCBaseDiskDisposed = cvar.DbgCBaseDiskDisposed
DbgCOSDiskCreated = cvar.DbgCOSDiskCreated
DbgCOSDiskDisposed = cvar.DbgCOSDiskDisposed
DbgCExtentListCreated = cvar.DbgCExtentListCreated
DbgCExtentListDisposed = cvar.DbgCExtentListDisposed
DbgCMappedClusterSpaceCreated = cvar.DbgCMappedClusterSpaceCreated
DbgCMappedClusterSpaceDisposed = cvar.DbgCMappedClusterSpaceDisposed
DbgCDiskClusterizerCreated = cvar.DbgCDiskClusterizerCreated
DbgCDiskClusterizerDisposed = cvar.DbgCDiskClusterizerDisposed
DbgCSimpleListCreated = cvar.DbgCSimpleListCreated
DbgCSimpleListDisposed = cvar.DbgCSimpleListDisposed

